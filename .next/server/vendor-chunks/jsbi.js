"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jsbi";
exports.ids = ["vendor-chunks/jsbi"];
exports.modules = {

/***/ "(ssr)/./node_modules/jsbi/dist/jsbi.mjs":
/*!*****************************************!*\
  !*** ./node_modules/jsbi/dist/jsbi.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass JSBI extends Array{constructor(i,_){if(super(i),this.sign=_,Object.setPrototypeOf(this,JSBI.prototype),i>JSBI.__kMaxLength)throw new RangeError(\"Maximum BigInt size exceeded\")}static BigInt(i){var _=Math.floor,t=Number.isFinite;if(\"number\"==typeof i){if(0===i)return JSBI.__zero();if(JSBI.__isOneDigitInt(i))return 0>i?JSBI.__oneDigit(-i,!0):JSBI.__oneDigit(i,!1);if(!t(i)||_(i)!==i)throw new RangeError(\"The number \"+i+\" cannot be converted to BigInt because it is not an integer\");return JSBI.__fromDouble(i)}if(\"string\"==typeof i){const _=JSBI.__fromString(i);if(null===_)throw new SyntaxError(\"Cannot convert \"+i+\" to a BigInt\");return _}if(\"boolean\"==typeof i)return!0===i?JSBI.__oneDigit(1,!1):JSBI.__zero();if(\"object\"==typeof i){if(i.constructor===JSBI)return i;const _=JSBI.__toPrimitive(i);return JSBI.BigInt(_)}throw new TypeError(\"Cannot convert \"+i+\" to a BigInt\")}toDebugString(){const i=[\"BigInt[\"];for(const _ of this)i.push((_?(_>>>0).toString(16):_)+\", \");return i.push(\"]\"),i.join(\"\")}toString(i=10){if(2>i||36<i)throw new RangeError(\"toString() radix argument must be between 2 and 36\");return 0===this.length?\"0\":0==(i&i-1)?JSBI.__toStringBasePowerOfTwo(this,i):JSBI.__toStringGeneric(this,i,!1)}valueOf(){throw new Error(\"Convert JSBI instances to native numbers using `toNumber`.\")}static toNumber(i){const _=i.length;if(0===_)return 0;if(1===_){const _=i.__unsignedDigit(0);return i.sign?-_:_}const t=i.__digit(_-1),e=JSBI.__clz30(t),n=30*_-e;if(1024<n)return i.sign?-Infinity:1/0;let g=n-1,s=t,o=_-1;const l=e+3;let r=32===l?0:s<<l;r>>>=12;const a=l-12;let u=12<=l?0:s<<20+l,d=20+l;for(0<a&&0<o&&(o--,s=i.__digit(o),r|=s>>>30-a,u=s<<a+2,d=a+2);0<d&&0<o;)o--,s=i.__digit(o),u|=30<=d?s<<d-30:s>>>30-d,d-=30;const h=JSBI.__decideRounding(i,d,o,s);if((1===h||0===h&&1==(1&u))&&(u=u+1>>>0,0===u&&(r++,0!=r>>>20&&(r=0,g++,1023<g))))return i.sign?-Infinity:1/0;const m=i.sign?-2147483648:0;return g=g+1023<<20,JSBI.__kBitConversionInts[1]=m|g|r,JSBI.__kBitConversionInts[0]=u,JSBI.__kBitConversionDouble[0]}static unaryMinus(i){if(0===i.length)return i;const _=i.__copy();return _.sign=!i.sign,_}static bitwiseNot(i){return i.sign?JSBI.__absoluteSubOne(i).__trim():JSBI.__absoluteAddOne(i,!0)}static exponentiate(i,_){if(_.sign)throw new RangeError(\"Exponent must be positive\");if(0===_.length)return JSBI.__oneDigit(1,!1);if(0===i.length)return i;if(1===i.length&&1===i.__digit(0))return i.sign&&0==(1&_.__digit(0))?JSBI.unaryMinus(i):i;if(1<_.length)throw new RangeError(\"BigInt too big\");let t=_.__unsignedDigit(0);if(1===t)return i;if(t>=JSBI.__kMaxLengthBits)throw new RangeError(\"BigInt too big\");if(1===i.length&&2===i.__digit(0)){const _=1+(0|t/30),e=i.sign&&0!=(1&t),n=new JSBI(_,e);n.__initializeDigits();const g=1<<t%30;return n.__setDigit(_-1,g),n}let e=null,n=i;for(0!=(1&t)&&(e=i),t>>=1;0!==t;t>>=1)n=JSBI.multiply(n,n),0!=(1&t)&&(null===e?e=n:e=JSBI.multiply(e,n));return e}static multiply(_,t){if(0===_.length)return _;if(0===t.length)return t;let i=_.length+t.length;30<=_.__clzmsd()+t.__clzmsd()&&i--;const e=new JSBI(i,_.sign!==t.sign);e.__initializeDigits();for(let n=0;n<_.length;n++)JSBI.__multiplyAccumulate(t,_.__digit(n),e,n);return e.__trim()}static divide(i,_){if(0===_.length)throw new RangeError(\"Division by zero\");if(0>JSBI.__absoluteCompare(i,_))return JSBI.__zero();const t=i.sign!==_.sign,e=_.__unsignedDigit(0);let n;if(1===_.length&&32767>=e){if(1===e)return t===i.sign?i:JSBI.unaryMinus(i);n=JSBI.__absoluteDivSmall(i,e,null)}else n=JSBI.__absoluteDivLarge(i,_,!0,!1);return n.sign=t,n.__trim()}static remainder(i,_){if(0===_.length)throw new RangeError(\"Division by zero\");if(0>JSBI.__absoluteCompare(i,_))return i;const t=_.__unsignedDigit(0);if(1===_.length&&32767>=t){if(1===t)return JSBI.__zero();const _=JSBI.__absoluteModSmall(i,t);return 0===_?JSBI.__zero():JSBI.__oneDigit(_,i.sign)}const e=JSBI.__absoluteDivLarge(i,_,!1,!0);return e.sign=i.sign,e.__trim()}static add(i,_){const t=i.sign;return t===_.sign?JSBI.__absoluteAdd(i,_,t):0<=JSBI.__absoluteCompare(i,_)?JSBI.__absoluteSub(i,_,t):JSBI.__absoluteSub(_,i,!t)}static subtract(i,_){const t=i.sign;return t===_.sign?0<=JSBI.__absoluteCompare(i,_)?JSBI.__absoluteSub(i,_,t):JSBI.__absoluteSub(_,i,!t):JSBI.__absoluteAdd(i,_,t)}static leftShift(i,_){return 0===_.length||0===i.length?i:_.sign?JSBI.__rightShiftByAbsolute(i,_):JSBI.__leftShiftByAbsolute(i,_)}static signedRightShift(i,_){return 0===_.length||0===i.length?i:_.sign?JSBI.__leftShiftByAbsolute(i,_):JSBI.__rightShiftByAbsolute(i,_)}static unsignedRightShift(){throw new TypeError(\"BigInts have no unsigned right shift; use >> instead\")}static lessThan(i,_){return 0>JSBI.__compareToBigInt(i,_)}static lessThanOrEqual(i,_){return 0>=JSBI.__compareToBigInt(i,_)}static greaterThan(i,_){return 0<JSBI.__compareToBigInt(i,_)}static greaterThanOrEqual(i,_){return 0<=JSBI.__compareToBigInt(i,_)}static equal(_,t){if(_.sign!==t.sign)return!1;if(_.length!==t.length)return!1;for(let e=0;e<_.length;e++)if(_.__digit(e)!==t.__digit(e))return!1;return!0}static notEqual(i,_){return!JSBI.equal(i,_)}static bitwiseAnd(i,_){var t=Math.max;if(!i.sign&&!_.sign)return JSBI.__absoluteAnd(i,_).__trim();if(i.sign&&_.sign){const e=t(i.length,_.length)+1;let n=JSBI.__absoluteSubOne(i,e);const g=JSBI.__absoluteSubOne(_);return n=JSBI.__absoluteOr(n,g,n),JSBI.__absoluteAddOne(n,!0,n).__trim()}return i.sign&&([i,_]=[_,i]),JSBI.__absoluteAndNot(i,JSBI.__absoluteSubOne(_)).__trim()}static bitwiseXor(i,_){var t=Math.max;if(!i.sign&&!_.sign)return JSBI.__absoluteXor(i,_).__trim();if(i.sign&&_.sign){const e=t(i.length,_.length),n=JSBI.__absoluteSubOne(i,e),g=JSBI.__absoluteSubOne(_);return JSBI.__absoluteXor(n,g,n).__trim()}const e=t(i.length,_.length)+1;i.sign&&([i,_]=[_,i]);let n=JSBI.__absoluteSubOne(_,e);return n=JSBI.__absoluteXor(n,i,n),JSBI.__absoluteAddOne(n,!0,n).__trim()}static bitwiseOr(i,_){var t=Math.max;const e=t(i.length,_.length);if(!i.sign&&!_.sign)return JSBI.__absoluteOr(i,_).__trim();if(i.sign&&_.sign){let t=JSBI.__absoluteSubOne(i,e);const n=JSBI.__absoluteSubOne(_);return t=JSBI.__absoluteAnd(t,n,t),JSBI.__absoluteAddOne(t,!0,t).__trim()}i.sign&&([i,_]=[_,i]);let n=JSBI.__absoluteSubOne(_,e);return n=JSBI.__absoluteAndNot(n,i,n),JSBI.__absoluteAddOne(n,!0,n).__trim()}static asIntN(_,t){var i=Math.floor;if(0===t.length)return t;if(_=i(_),0>_)throw new RangeError(\"Invalid value: not (convertible to) a safe integer\");if(0===_)return JSBI.__zero();if(_>=JSBI.__kMaxLengthBits)return t;const e=0|(_+29)/30;if(t.length<e)return t;const g=t.__unsignedDigit(e-1),s=1<<(_-1)%30;if(t.length===e&&g<s)return t;if(!((g&s)===s))return JSBI.__truncateToNBits(_,t);if(!t.sign)return JSBI.__truncateAndSubFromPowerOfTwo(_,t,!0);if(0==(g&s-1)){for(let n=e-2;0<=n;n--)if(0!==t.__digit(n))return JSBI.__truncateAndSubFromPowerOfTwo(_,t,!1);return t.length===e&&g===s?t:JSBI.__truncateToNBits(_,t)}return JSBI.__truncateAndSubFromPowerOfTwo(_,t,!1)}static asUintN(i,_){var t=Math.floor;if(0===_.length)return _;if(i=t(i),0>i)throw new RangeError(\"Invalid value: not (convertible to) a safe integer\");if(0===i)return JSBI.__zero();if(_.sign){if(i>JSBI.__kMaxLengthBits)throw new RangeError(\"BigInt too big\");return JSBI.__truncateAndSubFromPowerOfTwo(i,_,!1)}if(i>=JSBI.__kMaxLengthBits)return _;const e=0|(i+29)/30;if(_.length<e)return _;const g=i%30;if(_.length==e){if(0===g)return _;const i=_.__digit(e-1);if(0==i>>>g)return _}return JSBI.__truncateToNBits(i,_)}static ADD(i,_){if(i=JSBI.__toPrimitive(i),_=JSBI.__toPrimitive(_),\"string\"==typeof i)return\"string\"!=typeof _&&(_=_.toString()),i+_;if(\"string\"==typeof _)return i.toString()+_;if(i=JSBI.__toNumeric(i),_=JSBI.__toNumeric(_),JSBI.__isBigInt(i)&&JSBI.__isBigInt(_))return JSBI.add(i,_);if(\"number\"==typeof i&&\"number\"==typeof _)return i+_;throw new TypeError(\"Cannot mix BigInt and other types, use explicit conversions\")}static LT(i,_){return JSBI.__compare(i,_,0)}static LE(i,_){return JSBI.__compare(i,_,1)}static GT(i,_){return JSBI.__compare(i,_,2)}static GE(i,_){return JSBI.__compare(i,_,3)}static EQ(i,_){for(;;){if(JSBI.__isBigInt(i))return JSBI.__isBigInt(_)?JSBI.equal(i,_):JSBI.EQ(_,i);if(\"number\"==typeof i){if(JSBI.__isBigInt(_))return JSBI.__equalToNumber(_,i);if(\"object\"!=typeof _)return i==_;_=JSBI.__toPrimitive(_)}else if(\"string\"==typeof i){if(JSBI.__isBigInt(_))return i=JSBI.__fromString(i),null!==i&&JSBI.equal(i,_);if(\"object\"!=typeof _)return i==_;_=JSBI.__toPrimitive(_)}else if(\"boolean\"==typeof i){if(JSBI.__isBigInt(_))return JSBI.__equalToNumber(_,+i);if(\"object\"!=typeof _)return i==_;_=JSBI.__toPrimitive(_)}else if(\"symbol\"==typeof i){if(JSBI.__isBigInt(_))return!1;if(\"object\"!=typeof _)return i==_;_=JSBI.__toPrimitive(_)}else if(\"object\"==typeof i){if(\"object\"==typeof _&&_.constructor!==JSBI)return i==_;i=JSBI.__toPrimitive(i)}else return i==_}}static NE(i,_){return!JSBI.EQ(i,_)}static DataViewGetBigInt64(i,_,t=!1){return JSBI.asIntN(64,JSBI.DataViewGetBigUint64(i,_,t))}static DataViewGetBigUint64(i,_,t=!1){const[e,n]=t?[4,0]:[0,4],g=i.getUint32(_+e,t),s=i.getUint32(_+n,t),o=new JSBI(3,!1);return o.__setDigit(0,1073741823&s),o.__setDigit(1,(268435455&g)<<2|s>>>30),o.__setDigit(2,g>>>28),o.__trim()}static DataViewSetBigInt64(i,_,t,e=!1){JSBI.DataViewSetBigUint64(i,_,t,e)}static DataViewSetBigUint64(i,_,t,e=!1){t=JSBI.asUintN(64,t);let n=0,g=0;if(0<t.length&&(g=t.__digit(0),1<t.length)){const i=t.__digit(1);g|=i<<30,n=i>>>2,2<t.length&&(n|=t.__digit(2)<<28)}const[s,o]=e?[4,0]:[0,4];i.setUint32(_+s,n,e),i.setUint32(_+o,g,e)}static __zero(){return new JSBI(0,!1)}static __oneDigit(i,_){const t=new JSBI(1,_);return t.__setDigit(0,i),t}__copy(){const _=new JSBI(this.length,this.sign);for(let t=0;t<this.length;t++)_[t]=this[t];return _}__trim(){let i=this.length,_=this[i-1];for(;0===_;)i--,_=this[i-1],this.pop();return 0===i&&(this.sign=!1),this}__initializeDigits(){for(let _=0;_<this.length;_++)this[_]=0}static __decideRounding(i,_,t,e){if(0<_)return-1;let n;if(0>_)n=-_-1;else{if(0===t)return-1;t--,e=i.__digit(t),n=29}let g=1<<n;if(0==(e&g))return-1;if(g-=1,0!=(e&g))return 1;for(;0<t;)if(t--,0!==i.__digit(t))return 1;return 0}static __fromDouble(i){JSBI.__kBitConversionDouble[0]=i;const _=2047&JSBI.__kBitConversionInts[1]>>>20,t=_-1023,e=(0|t/30)+1,n=new JSBI(e,0>i);let g=1048575&JSBI.__kBitConversionInts[1]|1048576,s=JSBI.__kBitConversionInts[0];const o=20,l=t%30;let r,a=0;if(l<20){const i=o-l;a=i+32,r=g>>>i,g=g<<32-i|s>>>i,s<<=32-i}else if(l===20)a=32,r=g,g=s,s=0;else{const i=l-o;a=32-i,r=g<<i|s>>>32-i,g=s<<i,s=0}n.__setDigit(e-1,r);for(let _=e-2;0<=_;_--)0<a?(a-=30,r=g>>>2,g=g<<30|s>>>2,s<<=30):r=0,n.__setDigit(_,r);return n.__trim()}static __isWhitespace(i){return!!(13>=i&&9<=i)||(159>=i?32==i:131071>=i?160==i||5760==i:196607>=i?(i&=131071,10>=i||40==i||41==i||47==i||95==i||4096==i):65279==i)}static __fromString(i,_=0){let t=0;const e=i.length;let n=0;if(n===e)return JSBI.__zero();let g=i.charCodeAt(n);for(;JSBI.__isWhitespace(g);){if(++n===e)return JSBI.__zero();g=i.charCodeAt(n)}if(43===g){if(++n===e)return null;g=i.charCodeAt(n),t=1}else if(45===g){if(++n===e)return null;g=i.charCodeAt(n),t=-1}if(0===_){if(_=10,48===g){if(++n===e)return JSBI.__zero();if(g=i.charCodeAt(n),88===g||120===g){if(_=16,++n===e)return null;g=i.charCodeAt(n)}else if(79===g||111===g){if(_=8,++n===e)return null;g=i.charCodeAt(n)}else if(66===g||98===g){if(_=2,++n===e)return null;g=i.charCodeAt(n)}}}else if(16===_&&48===g){if(++n===e)return JSBI.__zero();if(g=i.charCodeAt(n),88===g||120===g){if(++n===e)return null;g=i.charCodeAt(n)}}if(0!=t&&10!==_)return null;for(;48===g;){if(++n===e)return JSBI.__zero();g=i.charCodeAt(n)}const s=e-n;let o=JSBI.__kMaxBitsPerChar[_],l=JSBI.__kBitsPerCharTableMultiplier-1;if(s>1073741824/o)return null;const r=o*s+l>>>JSBI.__kBitsPerCharTableShift,a=new JSBI(0|(r+29)/30,!1),u=10>_?_:10,h=10<_?_-10:0;if(0==(_&_-1)){o>>=JSBI.__kBitsPerCharTableShift;const _=[],t=[];let s=!1;do{let l=0,r=0;for(;;){let _;if(g-48>>>0<u)_=g-48;else if((32|g)-97>>>0<h)_=(32|g)-87;else{s=!0;break}if(r+=o,l=l<<o|_,++n===e){s=!0;break}if(g=i.charCodeAt(n),30<r+o)break}_.push(l),t.push(r)}while(!s);JSBI.__fillFromParts(a,_,t)}else{a.__initializeDigits();let t=!1,s=0;do{let r=0,b=1;for(;;){let o;if(g-48>>>0<u)o=g-48;else if((32|g)-97>>>0<h)o=(32|g)-87;else{t=!0;break}const l=b*_;if(1073741823<l)break;if(b=l,r=r*_+o,s++,++n===e){t=!0;break}g=i.charCodeAt(n)}l=30*JSBI.__kBitsPerCharTableMultiplier-1;const D=0|(o*s+l>>>JSBI.__kBitsPerCharTableShift)/30;a.__inplaceMultiplyAdd(b,r,D)}while(!t)}if(n!==e){if(!JSBI.__isWhitespace(g))return null;for(n++;n<e;n++)if(g=i.charCodeAt(n),!JSBI.__isWhitespace(g))return null}return a.sign=-1==t,a.__trim()}static __fillFromParts(_,t,e){let n=0,g=0,s=0;for(let o=t.length-1;0<=o;o--){const i=t[o],l=e[o];g|=i<<s,s+=l,30===s?(_.__setDigit(n++,g),s=0,g=0):30<s&&(_.__setDigit(n++,1073741823&g),s-=30,g=i>>>l-s)}if(0!==g){if(n>=_.length)throw new Error(\"implementation bug\");_.__setDigit(n++,g)}for(;n<_.length;n++)_.__setDigit(n,0)}static __toStringBasePowerOfTwo(_,i){const t=_.length;let e=i-1;e=(85&e>>>1)+(85&e),e=(51&e>>>2)+(51&e),e=(15&e>>>4)+(15&e);const n=e,g=i-1,s=_.__digit(t-1),o=JSBI.__clz30(s);let l=0|(30*t-o+n-1)/n;if(_.sign&&l++,268435456<l)throw new Error(\"string too long\");const r=Array(l);let a=l-1,u=0,d=0;for(let e=0;e<t-1;e++){const i=_.__digit(e),t=(u|i<<d)&g;r[a--]=JSBI.__kConversionChars[t];const s=n-d;for(u=i>>>s,d=30-s;d>=n;)r[a--]=JSBI.__kConversionChars[u&g],u>>>=n,d-=n}const h=(u|s<<d)&g;for(r[a--]=JSBI.__kConversionChars[h],u=s>>>n-d;0!==u;)r[a--]=JSBI.__kConversionChars[u&g],u>>>=n;if(_.sign&&(r[a--]=\"-\"),-1!=a)throw new Error(\"implementation bug\");return r.join(\"\")}static __toStringGeneric(_,i,t){const e=_.length;if(0===e)return\"\";if(1===e){let e=_.__unsignedDigit(0).toString(i);return!1===t&&_.sign&&(e=\"-\"+e),e}const n=30*e-JSBI.__clz30(_.__digit(e-1)),g=JSBI.__kMaxBitsPerChar[i],s=g-1;let o=n*JSBI.__kBitsPerCharTableMultiplier;o+=s-1,o=0|o/s;const l=o+1>>1,r=JSBI.exponentiate(JSBI.__oneDigit(i,!1),JSBI.__oneDigit(l,!1));let a,u;const d=r.__unsignedDigit(0);if(1===r.length&&32767>=d){a=new JSBI(_.length,!1),a.__initializeDigits();let t=0;for(let e=2*_.length-1;0<=e;e--){const i=t<<15|_.__halfDigit(e);a.__setHalfDigit(e,0|i/d),t=0|i%d}u=t.toString(i)}else{const t=JSBI.__absoluteDivLarge(_,r,!0,!0);a=t.quotient;const e=t.remainder.__trim();u=JSBI.__toStringGeneric(e,i,!0)}a.__trim();let h=JSBI.__toStringGeneric(a,i,!0);for(;u.length<l;)u=\"0\"+u;return!1===t&&_.sign&&(h=\"-\"+h),h+u}static __unequalSign(i){return i?-1:1}static __absoluteGreater(i){return i?-1:1}static __absoluteLess(i){return i?1:-1}static __compareToBigInt(i,_){const t=i.sign;if(t!==_.sign)return JSBI.__unequalSign(t);const e=JSBI.__absoluteCompare(i,_);return 0<e?JSBI.__absoluteGreater(t):0>e?JSBI.__absoluteLess(t):0}static __compareToNumber(i,_){if(JSBI.__isOneDigitInt(_)){const t=i.sign,e=0>_;if(t!==e)return JSBI.__unequalSign(t);if(0===i.length){if(e)throw new Error(\"implementation bug\");return 0===_?0:-1}if(1<i.length)return JSBI.__absoluteGreater(t);const n=Math.abs(_),g=i.__unsignedDigit(0);return g>n?JSBI.__absoluteGreater(t):g<n?JSBI.__absoluteLess(t):0}return JSBI.__compareToDouble(i,_)}static __compareToDouble(i,_){if(_!==_)return _;if(_===1/0)return-1;if(_===-Infinity)return 1;const t=i.sign;if(t!==0>_)return JSBI.__unequalSign(t);if(0===_)throw new Error(\"implementation bug: should be handled elsewhere\");if(0===i.length)return-1;JSBI.__kBitConversionDouble[0]=_;const e=2047&JSBI.__kBitConversionInts[1]>>>20;if(2047==e)throw new Error(\"implementation bug: handled elsewhere\");const n=e-1023;if(0>n)return JSBI.__absoluteGreater(t);const g=i.length;let s=i.__digit(g-1);const o=JSBI.__clz30(s),l=30*g-o,r=n+1;if(l<r)return JSBI.__absoluteLess(t);if(l>r)return JSBI.__absoluteGreater(t);let a=1048576|1048575&JSBI.__kBitConversionInts[1],u=JSBI.__kBitConversionInts[0];const d=20,h=29-o;if(h!==(0|(l-1)%30))throw new Error(\"implementation bug\");let m,b=0;if(20>h){const i=d-h;b=i+32,m=a>>>i,a=a<<32-i|u>>>i,u<<=32-i}else if(20===h)b=32,m=a,a=u,u=0;else{const i=h-d;b=32-i,m=a<<i|u>>>32-i,a=u<<i,u=0}if(s>>>=0,m>>>=0,s>m)return JSBI.__absoluteGreater(t);if(s<m)return JSBI.__absoluteLess(t);for(let e=g-2;0<=e;e--){0<b?(b-=30,m=a>>>2,a=a<<30|u>>>2,u<<=30):m=0;const _=i.__unsignedDigit(e);if(_>m)return JSBI.__absoluteGreater(t);if(_<m)return JSBI.__absoluteLess(t)}if(0!==a||0!==u){if(0===b)throw new Error(\"implementation bug\");return JSBI.__absoluteLess(t)}return 0}static __equalToNumber(i,_){var t=Math.abs;return JSBI.__isOneDigitInt(_)?0===_?0===i.length:1===i.length&&i.sign===0>_&&i.__unsignedDigit(0)===t(_):0===JSBI.__compareToDouble(i,_)}static __comparisonResultToBool(i,_){return 0===_?0>i:1===_?0>=i:2===_?0<i:3===_?0<=i:void 0}static __compare(i,_,t){if(i=JSBI.__toPrimitive(i),_=JSBI.__toPrimitive(_),\"string\"==typeof i&&\"string\"==typeof _)switch(t){case 0:return i<_;case 1:return i<=_;case 2:return i>_;case 3:return i>=_;}if(JSBI.__isBigInt(i)&&\"string\"==typeof _)return _=JSBI.__fromString(_),null!==_&&JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(i,_),t);if(\"string\"==typeof i&&JSBI.__isBigInt(_))return i=JSBI.__fromString(i),null!==i&&JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(i,_),t);if(i=JSBI.__toNumeric(i),_=JSBI.__toNumeric(_),JSBI.__isBigInt(i)){if(JSBI.__isBigInt(_))return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(i,_),t);if(\"number\"!=typeof _)throw new Error(\"implementation bug\");return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(i,_),t)}if(\"number\"!=typeof i)throw new Error(\"implementation bug\");if(JSBI.__isBigInt(_))return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(_,i),2^t);if(\"number\"!=typeof _)throw new Error(\"implementation bug\");return 0===t?i<_:1===t?i<=_:2===t?i>_:3===t?i>=_:void 0}__clzmsd(){return JSBI.__clz30(this.__digit(this.length-1))}static __absoluteAdd(_,t,e){if(_.length<t.length)return JSBI.__absoluteAdd(t,_,e);if(0===_.length)return _;if(0===t.length)return _.sign===e?_:JSBI.unaryMinus(_);let n=_.length;(0===_.__clzmsd()||t.length===_.length&&0===t.__clzmsd())&&n++;const g=new JSBI(n,e);let s=0,o=0;for(;o<t.length;o++){const i=_.__digit(o)+t.__digit(o)+s;s=i>>>30,g.__setDigit(o,1073741823&i)}for(;o<_.length;o++){const i=_.__digit(o)+s;s=i>>>30,g.__setDigit(o,1073741823&i)}return o<g.length&&g.__setDigit(o,s),g.__trim()}static __absoluteSub(_,t,e){if(0===_.length)return _;if(0===t.length)return _.sign===e?_:JSBI.unaryMinus(_);const n=new JSBI(_.length,e);let g=0,s=0;for(;s<t.length;s++){const i=_.__digit(s)-t.__digit(s)-g;g=1&i>>>30,n.__setDigit(s,1073741823&i)}for(;s<_.length;s++){const i=_.__digit(s)-g;g=1&i>>>30,n.__setDigit(s,1073741823&i)}return n.__trim()}static __absoluteAddOne(_,i,t=null){const e=_.length;null===t?t=new JSBI(e,i):t.sign=i;let n=1;for(let g=0;g<e;g++){const i=_.__digit(g)+n;n=i>>>30,t.__setDigit(g,1073741823&i)}return 0!=n&&t.__setDigitGrow(e,1),t}static __absoluteSubOne(_,t){const e=_.length;t=t||e;const n=new JSBI(t,!1);let g=1;for(let s=0;s<e;s++){const i=_.__digit(s)-g;g=1&i>>>30,n.__setDigit(s,1073741823&i)}if(0!=g)throw new Error(\"implementation bug\");for(let g=e;g<t;g++)n.__setDigit(g,0);return n}static __absoluteAnd(_,t,e=null){let n=_.length,g=t.length,s=g;if(n<g){s=n;const i=_,e=n;_=t,n=g,t=i,g=e}let o=s;null===e?e=new JSBI(o,!1):o=e.length;let l=0;for(;l<s;l++)e.__setDigit(l,_.__digit(l)&t.__digit(l));for(;l<o;l++)e.__setDigit(l,0);return e}static __absoluteAndNot(_,t,e=null){const n=_.length,g=t.length;let s=g;n<g&&(s=n);let o=n;null===e?e=new JSBI(o,!1):o=e.length;let l=0;for(;l<s;l++)e.__setDigit(l,_.__digit(l)&~t.__digit(l));for(;l<n;l++)e.__setDigit(l,_.__digit(l));for(;l<o;l++)e.__setDigit(l,0);return e}static __absoluteOr(_,t,e=null){let n=_.length,g=t.length,s=g;if(n<g){s=n;const i=_,e=n;_=t,n=g,t=i,g=e}let o=n;null===e?e=new JSBI(o,!1):o=e.length;let l=0;for(;l<s;l++)e.__setDigit(l,_.__digit(l)|t.__digit(l));for(;l<n;l++)e.__setDigit(l,_.__digit(l));for(;l<o;l++)e.__setDigit(l,0);return e}static __absoluteXor(_,t,e=null){let n=_.length,g=t.length,s=g;if(n<g){s=n;const i=_,e=n;_=t,n=g,t=i,g=e}let o=n;null===e?e=new JSBI(o,!1):o=e.length;let l=0;for(;l<s;l++)e.__setDigit(l,_.__digit(l)^t.__digit(l));for(;l<n;l++)e.__setDigit(l,_.__digit(l));for(;l<o;l++)e.__setDigit(l,0);return e}static __absoluteCompare(_,t){const e=_.length-t.length;if(0!=e)return e;let n=_.length-1;for(;0<=n&&_.__digit(n)===t.__digit(n);)n--;return 0>n?0:_.__unsignedDigit(n)>t.__unsignedDigit(n)?1:-1}static __multiplyAccumulate(_,t,e,n){if(0===t)return;const g=32767&t,s=t>>>15;let o=0,l=0;for(let r,a=0;a<_.length;a++,n++){r=e.__digit(n);const i=_.__digit(a),t=32767&i,u=i>>>15,d=JSBI.__imul(t,g),h=JSBI.__imul(t,s),m=JSBI.__imul(u,g),b=JSBI.__imul(u,s);r+=l+d+o,o=r>>>30,r&=1073741823,r+=((32767&h)<<15)+((32767&m)<<15),o+=r>>>30,l=b+(h>>>15)+(m>>>15),e.__setDigit(n,1073741823&r)}for(;0!=o||0!==l;n++){let i=e.__digit(n);i+=o+l,l=0,o=i>>>30,e.__setDigit(n,1073741823&i)}}static __internalMultiplyAdd(_,t,e,g,s){let o=e,l=0;for(let n=0;n<g;n++){const i=_.__digit(n),e=JSBI.__imul(32767&i,t),g=JSBI.__imul(i>>>15,t),a=e+((32767&g)<<15)+l+o;o=a>>>30,l=g>>>15,s.__setDigit(n,1073741823&a)}if(s.length>g)for(s.__setDigit(g++,o+l);g<s.length;)s.__setDigit(g++,0);else if(0!==o+l)throw new Error(\"implementation bug\")}__inplaceMultiplyAdd(i,_,t){t>this.length&&(t=this.length);const e=32767&i,n=i>>>15;let g=0,s=_;for(let o=0;o<t;o++){const i=this.__digit(o),_=32767&i,t=i>>>15,l=JSBI.__imul(_,e),r=JSBI.__imul(_,n),a=JSBI.__imul(t,e),u=JSBI.__imul(t,n);let d=s+l+g;g=d>>>30,d&=1073741823,d+=((32767&r)<<15)+((32767&a)<<15),g+=d>>>30,s=u+(r>>>15)+(a>>>15),this.__setDigit(o,1073741823&d)}if(0!=g||0!==s)throw new Error(\"implementation bug\")}static __absoluteDivSmall(_,t,e=null){null===e&&(e=new JSBI(_.length,!1));let n=0;for(let g,s=2*_.length-1;0<=s;s-=2){g=(n<<15|_.__halfDigit(s))>>>0;const i=0|g/t;n=0|g%t,g=(n<<15|_.__halfDigit(s-1))>>>0;const o=0|g/t;n=0|g%t,e.__setDigit(s>>>1,i<<15|o)}return e}static __absoluteModSmall(_,t){let e=0;for(let n=2*_.length-1;0<=n;n--){const i=(e<<15|_.__halfDigit(n))>>>0;e=0|i%t}return e}static __absoluteDivLarge(i,_,t,e){const g=_.__halfDigitLength(),n=_.length,s=i.__halfDigitLength()-g;let o=null;t&&(o=new JSBI(s+2>>>1,!1),o.__initializeDigits());const l=new JSBI(g+2>>>1,!1);l.__initializeDigits();const r=JSBI.__clz15(_.__halfDigit(g-1));0<r&&(_=JSBI.__specialLeftShift(_,r,0));const a=JSBI.__specialLeftShift(i,r,1),u=_.__halfDigit(g-1);let d=0;for(let r,h=s;0<=h;h--){r=32767;const i=a.__halfDigit(h+g);if(i!==u){const t=(i<<15|a.__halfDigit(h+g-1))>>>0;r=0|t/u;let e=0|t%u;const n=_.__halfDigit(g-2),s=a.__halfDigit(h+g-2);for(;JSBI.__imul(r,n)>>>0>(e<<16|s)>>>0&&(r--,e+=u,!(32767<e)););}JSBI.__internalMultiplyAdd(_,r,0,n,l);let e=a.__inplaceSub(l,h,g+1);0!==e&&(e=a.__inplaceAdd(_,h,g),a.__setHalfDigit(h+g,32767&a.__halfDigit(h+g)+e),r--),t&&(1&h?d=r<<15:o.__setDigit(h>>>1,d|r))}if(e)return a.__inplaceRightShift(r),t?{quotient:o,remainder:a}:a;if(t)return o;throw new Error(\"unreachable\")}static __clz15(i){return JSBI.__clz30(i)-15}__inplaceAdd(_,t,e){let n=0;for(let g=0;g<e;g++){const i=this.__halfDigit(t+g)+_.__halfDigit(g)+n;n=i>>>15,this.__setHalfDigit(t+g,32767&i)}return n}__inplaceSub(_,t,e){let n=0;if(1&t){t>>=1;let g=this.__digit(t),s=32767&g,o=0;for(;o<e-1>>>1;o++){const i=_.__digit(o),e=(g>>>15)-(32767&i)-n;n=1&e>>>15,this.__setDigit(t+o,(32767&e)<<15|32767&s),g=this.__digit(t+o+1),s=(32767&g)-(i>>>15)-n,n=1&s>>>15}const i=_.__digit(o),l=(g>>>15)-(32767&i)-n;n=1&l>>>15,this.__setDigit(t+o,(32767&l)<<15|32767&s);if(t+o+1>=this.length)throw new RangeError(\"out of bounds\");0==(1&e)&&(g=this.__digit(t+o+1),s=(32767&g)-(i>>>15)-n,n=1&s>>>15,this.__setDigit(t+_.length,1073709056&g|32767&s))}else{t>>=1;let g=0;for(;g<_.length-1;g++){const i=this.__digit(t+g),e=_.__digit(g),s=(32767&i)-(32767&e)-n;n=1&s>>>15;const o=(i>>>15)-(e>>>15)-n;n=1&o>>>15,this.__setDigit(t+g,(32767&o)<<15|32767&s)}const i=this.__digit(t+g),s=_.__digit(g),o=(32767&i)-(32767&s)-n;n=1&o>>>15;let l=0;0==(1&e)&&(l=(i>>>15)-(s>>>15)-n,n=1&l>>>15),this.__setDigit(t+g,(32767&l)<<15|32767&o)}return n}__inplaceRightShift(_){if(0===_)return;let t=this.__digit(0)>>>_;const e=this.length-1;for(let n=0;n<e;n++){const i=this.__digit(n+1);this.__setDigit(n,1073741823&i<<30-_|t),t=i>>>_}this.__setDigit(e,t)}static __specialLeftShift(_,t,e){const g=_.length,n=new JSBI(g+e,!1);if(0===t){for(let t=0;t<g;t++)n.__setDigit(t,_.__digit(t));return 0<e&&n.__setDigit(g,0),n}let s=0;for(let o=0;o<g;o++){const i=_.__digit(o);n.__setDigit(o,1073741823&i<<t|s),s=i>>>30-t}return 0<e&&n.__setDigit(g,s),n}static __leftShiftByAbsolute(_,i){const t=JSBI.__toShiftAmount(i);if(0>t)throw new RangeError(\"BigInt too big\");const e=0|t/30,n=t%30,g=_.length,s=0!==n&&0!=_.__digit(g-1)>>>30-n,o=g+e+(s?1:0),l=new JSBI(o,_.sign);if(0===n){let t=0;for(;t<e;t++)l.__setDigit(t,0);for(;t<o;t++)l.__setDigit(t,_.__digit(t-e))}else{let t=0;for(let _=0;_<e;_++)l.__setDigit(_,0);for(let s=0;s<g;s++){const i=_.__digit(s);l.__setDigit(s+e,1073741823&i<<n|t),t=i>>>30-n}if(s)l.__setDigit(g+e,t);else if(0!==t)throw new Error(\"implementation bug\")}return l.__trim()}static __rightShiftByAbsolute(_,i){const t=_.length,e=_.sign,n=JSBI.__toShiftAmount(i);if(0>n)return JSBI.__rightShiftByMaximum(e);const g=0|n/30,s=n%30;let o=t-g;if(0>=o)return JSBI.__rightShiftByMaximum(e);let l=!1;if(e){if(0!=(_.__digit(g)&(1<<s)-1))l=!0;else for(let t=0;t<g;t++)if(0!==_.__digit(t)){l=!0;break}}if(l&&0===s){const i=_.__digit(t-1);0==~i&&o++}let r=new JSBI(o,e);if(0===s){r.__setDigit(o-1,0);for(let e=g;e<t;e++)r.__setDigit(e-g,_.__digit(e))}else{let e=_.__digit(g)>>>s;const n=t-g-1;for(let t=0;t<n;t++){const i=_.__digit(t+g+1);r.__setDigit(t,1073741823&i<<30-s|e),e=i>>>s}r.__setDigit(n,e)}return l&&(r=JSBI.__absoluteAddOne(r,!0,r)),r.__trim()}static __rightShiftByMaximum(i){return i?JSBI.__oneDigit(1,!0):JSBI.__zero()}static __toShiftAmount(i){if(1<i.length)return-1;const _=i.__unsignedDigit(0);return _>JSBI.__kMaxLengthBits?-1:_}static __toPrimitive(i,_=\"default\"){if(\"object\"!=typeof i)return i;if(i.constructor===JSBI)return i;if(\"undefined\"!=typeof Symbol&&\"symbol\"==typeof Symbol.toPrimitive){const t=i[Symbol.toPrimitive];if(t){const i=t(_);if(\"object\"!=typeof i)return i;throw new TypeError(\"Cannot convert object to primitive value\")}}const t=i.valueOf;if(t){const _=t.call(i);if(\"object\"!=typeof _)return _}const e=i.toString;if(e){const _=e.call(i);if(\"object\"!=typeof _)return _}throw new TypeError(\"Cannot convert object to primitive value\")}static __toNumeric(i){return JSBI.__isBigInt(i)?i:+i}static __isBigInt(i){return\"object\"==typeof i&&null!==i&&i.constructor===JSBI}static __truncateToNBits(i,_){const t=0|(i+29)/30,e=new JSBI(t,_.sign),n=t-1;for(let t=0;t<n;t++)e.__setDigit(t,_.__digit(t));let g=_.__digit(n);if(0!=i%30){const _=32-i%30;g=g<<_>>>_}return e.__setDigit(n,g),e.__trim()}static __truncateAndSubFromPowerOfTwo(_,t,e){var n=Math.min;const g=0|(_+29)/30,s=new JSBI(g,e);let o=0;const l=g-1;let a=0;for(const i=n(l,t.length);o<i;o++){const i=0-t.__digit(o)-a;a=1&i>>>30,s.__setDigit(o,1073741823&i)}for(;o<l;o++)s.__setDigit(o,0|1073741823&-a);let u=l<t.length?t.__digit(l):0;const d=_%30;let h;if(0==d)h=0-u-a,h&=1073741823;else{const i=32-d;u=u<<i>>>i;const _=1<<32-i;h=_-u-a,h&=_-1}return s.__setDigit(l,h),s.__trim()}__digit(_){return this[_]}__unsignedDigit(_){return this[_]>>>0}__setDigit(_,i){this[_]=0|i}__setDigitGrow(_,i){this[_]=0|i}__halfDigitLength(){const i=this.length;return 32767>=this.__unsignedDigit(i-1)?2*i-1:2*i}__halfDigit(_){return 32767&this[_>>>1]>>>15*(1&_)}__setHalfDigit(_,i){const t=_>>>1,e=this.__digit(t),n=1&_?32767&e|i<<15:1073709056&e|32767&i;this.__setDigit(t,n)}static __digitPow(i,_){let t=1;for(;0<_;)1&_&&(t*=i),_>>>=1,i*=i;return t}static __isOneDigitInt(i){return(1073741823&i)===i}}JSBI.__kMaxLength=33554432,JSBI.__kMaxLengthBits=JSBI.__kMaxLength<<5,JSBI.__kMaxBitsPerChar=[0,0,32,51,64,75,83,90,96,102,107,111,115,119,122,126,128,131,134,136,139,141,143,145,147,149,151,153,154,156,158,159,160,162,163,165,166],JSBI.__kBitsPerCharTableShift=5,JSBI.__kBitsPerCharTableMultiplier=1<<JSBI.__kBitsPerCharTableShift,JSBI.__kConversionChars=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"],JSBI.__kBitConversionBuffer=new ArrayBuffer(8),JSBI.__kBitConversionDouble=new Float64Array(JSBI.__kBitConversionBuffer),JSBI.__kBitConversionInts=new Int32Array(JSBI.__kBitConversionBuffer),JSBI.__clz30=Math.clz32?function(i){return Math.clz32(i)-2}:function(i){return 0===i?30:0|29-(0|Math.log(i>>>0)/Math.LN2)},JSBI.__imul=Math.imul||function(i,_){return 0|i*_};/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (JSBI);\n//# sourceMappingURL=jsbi.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QXFCLHVCQUF1QixRQUFRLEtBQUssSUFBSSx5QkFBeUIsU0FBUywwQkFBMEIsMEJBQTBCLHl0QkFBeXRCLHVCQUF1QixhQUFhLGtEQUFrRCxzQ0FBc0MsY0FBYyxpRUFBZSxJQUFJLEVBQUM7QUFDbGs0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3dhbGxldC1jb25uZWN0aW9ucy8uL25vZGVfbW9kdWxlcy9qc2JpL2Rpc3QvanNiaS5tanM/ODY1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBKU0JJIGV4dGVuZHMgQXJyYXl7Y29uc3RydWN0b3IoaSxfKXtpZihzdXBlcihpKSx0aGlzLnNpZ249XyxPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcyxKU0JJLnByb3RvdHlwZSksaT5KU0JJLl9fa01heExlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIk1heGltdW0gQmlnSW50IHNpemUgZXhjZWVkZWRcIil9c3RhdGljIEJpZ0ludChpKXt2YXIgXz1NYXRoLmZsb29yLHQ9TnVtYmVyLmlzRmluaXRlO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBpKXtpZigwPT09aSlyZXR1cm4gSlNCSS5fX3plcm8oKTtpZihKU0JJLl9faXNPbmVEaWdpdEludChpKSlyZXR1cm4gMD5pP0pTQkkuX19vbmVEaWdpdCgtaSwhMCk6SlNCSS5fX29uZURpZ2l0KGksITEpO2lmKCF0KGkpfHxfKGkpIT09aSl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRoZSBudW1iZXIgXCIraStcIiBjYW5ub3QgYmUgY29udmVydGVkIHRvIEJpZ0ludCBiZWNhdXNlIGl0IGlzIG5vdCBhbiBpbnRlZ2VyXCIpO3JldHVybiBKU0JJLl9fZnJvbURvdWJsZShpKX1pZihcInN0cmluZ1wiPT10eXBlb2YgaSl7Y29uc3QgXz1KU0JJLl9fZnJvbVN0cmluZyhpKTtpZihudWxsPT09Xyl0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJDYW5ub3QgY29udmVydCBcIitpK1wiIHRvIGEgQmlnSW50XCIpO3JldHVybiBffWlmKFwiYm9vbGVhblwiPT10eXBlb2YgaSlyZXR1cm4hMD09PWk/SlNCSS5fX29uZURpZ2l0KDEsITEpOkpTQkkuX196ZXJvKCk7aWYoXCJvYmplY3RcIj09dHlwZW9mIGkpe2lmKGkuY29uc3RydWN0b3I9PT1KU0JJKXJldHVybiBpO2NvbnN0IF89SlNCSS5fX3RvUHJpbWl0aXZlKGkpO3JldHVybiBKU0JJLkJpZ0ludChfKX10aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNvbnZlcnQgXCIraStcIiB0byBhIEJpZ0ludFwiKX10b0RlYnVnU3RyaW5nKCl7Y29uc3QgaT1bXCJCaWdJbnRbXCJdO2Zvcihjb25zdCBfIG9mIHRoaXMpaS5wdXNoKChfPyhfPj4+MCkudG9TdHJpbmcoMTYpOl8pK1wiLCBcIik7cmV0dXJuIGkucHVzaChcIl1cIiksaS5qb2luKFwiXCIpfXRvU3RyaW5nKGk9MTApe2lmKDI+aXx8MzY8aSl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInRvU3RyaW5nKCkgcmFkaXggYXJndW1lbnQgbXVzdCBiZSBiZXR3ZWVuIDIgYW5kIDM2XCIpO3JldHVybiAwPT09dGhpcy5sZW5ndGg/XCIwXCI6MD09KGkmaS0xKT9KU0JJLl9fdG9TdHJpbmdCYXNlUG93ZXJPZlR3byh0aGlzLGkpOkpTQkkuX190b1N0cmluZ0dlbmVyaWModGhpcyxpLCExKX12YWx1ZU9mKCl7dGhyb3cgbmV3IEVycm9yKFwiQ29udmVydCBKU0JJIGluc3RhbmNlcyB0byBuYXRpdmUgbnVtYmVycyB1c2luZyBgdG9OdW1iZXJgLlwiKX1zdGF0aWMgdG9OdW1iZXIoaSl7Y29uc3QgXz1pLmxlbmd0aDtpZigwPT09XylyZXR1cm4gMDtpZigxPT09Xyl7Y29uc3QgXz1pLl9fdW5zaWduZWREaWdpdCgwKTtyZXR1cm4gaS5zaWduPy1fOl99Y29uc3QgdD1pLl9fZGlnaXQoXy0xKSxlPUpTQkkuX19jbHozMCh0KSxuPTMwKl8tZTtpZigxMDI0PG4pcmV0dXJuIGkuc2lnbj8tSW5maW5pdHk6MS8wO2xldCBnPW4tMSxzPXQsbz1fLTE7Y29uc3QgbD1lKzM7bGV0IHI9MzI9PT1sPzA6czw8bDtyPj4+PTEyO2NvbnN0IGE9bC0xMjtsZXQgdT0xMjw9bD8wOnM8PDIwK2wsZD0yMCtsO2ZvcigwPGEmJjA8byYmKG8tLSxzPWkuX19kaWdpdChvKSxyfD1zPj4+MzAtYSx1PXM8PGErMixkPWErMik7MDxkJiYwPG87KW8tLSxzPWkuX19kaWdpdChvKSx1fD0zMDw9ZD9zPDxkLTMwOnM+Pj4zMC1kLGQtPTMwO2NvbnN0IGg9SlNCSS5fX2RlY2lkZVJvdW5kaW5nKGksZCxvLHMpO2lmKCgxPT09aHx8MD09PWgmJjE9PSgxJnUpKSYmKHU9dSsxPj4+MCwwPT09dSYmKHIrKywwIT1yPj4+MjAmJihyPTAsZysrLDEwMjM8ZykpKSlyZXR1cm4gaS5zaWduPy1JbmZpbml0eToxLzA7Y29uc3QgbT1pLnNpZ24/LTIxNDc0ODM2NDg6MDtyZXR1cm4gZz1nKzEwMjM8PDIwLEpTQkkuX19rQml0Q29udmVyc2lvbkludHNbMV09bXxnfHIsSlNCSS5fX2tCaXRDb252ZXJzaW9uSW50c1swXT11LEpTQkkuX19rQml0Q29udmVyc2lvbkRvdWJsZVswXX1zdGF0aWMgdW5hcnlNaW51cyhpKXtpZigwPT09aS5sZW5ndGgpcmV0dXJuIGk7Y29uc3QgXz1pLl9fY29weSgpO3JldHVybiBfLnNpZ249IWkuc2lnbixffXN0YXRpYyBiaXR3aXNlTm90KGkpe3JldHVybiBpLnNpZ24/SlNCSS5fX2Fic29sdXRlU3ViT25lKGkpLl9fdHJpbSgpOkpTQkkuX19hYnNvbHV0ZUFkZE9uZShpLCEwKX1zdGF0aWMgZXhwb25lbnRpYXRlKGksXyl7aWYoXy5zaWduKXRocm93IG5ldyBSYW5nZUVycm9yKFwiRXhwb25lbnQgbXVzdCBiZSBwb3NpdGl2ZVwiKTtpZigwPT09Xy5sZW5ndGgpcmV0dXJuIEpTQkkuX19vbmVEaWdpdCgxLCExKTtpZigwPT09aS5sZW5ndGgpcmV0dXJuIGk7aWYoMT09PWkubGVuZ3RoJiYxPT09aS5fX2RpZ2l0KDApKXJldHVybiBpLnNpZ24mJjA9PSgxJl8uX19kaWdpdCgwKSk/SlNCSS51bmFyeU1pbnVzKGkpOmk7aWYoMTxfLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJpZ0ludCB0b28gYmlnXCIpO2xldCB0PV8uX191bnNpZ25lZERpZ2l0KDApO2lmKDE9PT10KXJldHVybiBpO2lmKHQ+PUpTQkkuX19rTWF4TGVuZ3RoQml0cyl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJpZ0ludCB0b28gYmlnXCIpO2lmKDE9PT1pLmxlbmd0aCYmMj09PWkuX19kaWdpdCgwKSl7Y29uc3QgXz0xKygwfHQvMzApLGU9aS5zaWduJiYwIT0oMSZ0KSxuPW5ldyBKU0JJKF8sZSk7bi5fX2luaXRpYWxpemVEaWdpdHMoKTtjb25zdCBnPTE8PHQlMzA7cmV0dXJuIG4uX19zZXREaWdpdChfLTEsZyksbn1sZXQgZT1udWxsLG49aTtmb3IoMCE9KDEmdCkmJihlPWkpLHQ+Pj0xOzAhPT10O3Q+Pj0xKW49SlNCSS5tdWx0aXBseShuLG4pLDAhPSgxJnQpJiYobnVsbD09PWU/ZT1uOmU9SlNCSS5tdWx0aXBseShlLG4pKTtyZXR1cm4gZX1zdGF0aWMgbXVsdGlwbHkoXyx0KXtpZigwPT09Xy5sZW5ndGgpcmV0dXJuIF87aWYoMD09PXQubGVuZ3RoKXJldHVybiB0O2xldCBpPV8ubGVuZ3RoK3QubGVuZ3RoOzMwPD1fLl9fY2x6bXNkKCkrdC5fX2Nsem1zZCgpJiZpLS07Y29uc3QgZT1uZXcgSlNCSShpLF8uc2lnbiE9PXQuc2lnbik7ZS5fX2luaXRpYWxpemVEaWdpdHMoKTtmb3IobGV0IG49MDtuPF8ubGVuZ3RoO24rKylKU0JJLl9fbXVsdGlwbHlBY2N1bXVsYXRlKHQsXy5fX2RpZ2l0KG4pLGUsbik7cmV0dXJuIGUuX190cmltKCl9c3RhdGljIGRpdmlkZShpLF8pe2lmKDA9PT1fLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkRpdmlzaW9uIGJ5IHplcm9cIik7aWYoMD5KU0JJLl9fYWJzb2x1dGVDb21wYXJlKGksXykpcmV0dXJuIEpTQkkuX196ZXJvKCk7Y29uc3QgdD1pLnNpZ24hPT1fLnNpZ24sZT1fLl9fdW5zaWduZWREaWdpdCgwKTtsZXQgbjtpZigxPT09Xy5sZW5ndGgmJjMyNzY3Pj1lKXtpZigxPT09ZSlyZXR1cm4gdD09PWkuc2lnbj9pOkpTQkkudW5hcnlNaW51cyhpKTtuPUpTQkkuX19hYnNvbHV0ZURpdlNtYWxsKGksZSxudWxsKX1lbHNlIG49SlNCSS5fX2Fic29sdXRlRGl2TGFyZ2UoaSxfLCEwLCExKTtyZXR1cm4gbi5zaWduPXQsbi5fX3RyaW0oKX1zdGF0aWMgcmVtYWluZGVyKGksXyl7aWYoMD09PV8ubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiRGl2aXNpb24gYnkgemVyb1wiKTtpZigwPkpTQkkuX19hYnNvbHV0ZUNvbXBhcmUoaSxfKSlyZXR1cm4gaTtjb25zdCB0PV8uX191bnNpZ25lZERpZ2l0KDApO2lmKDE9PT1fLmxlbmd0aCYmMzI3Njc+PXQpe2lmKDE9PT10KXJldHVybiBKU0JJLl9femVybygpO2NvbnN0IF89SlNCSS5fX2Fic29sdXRlTW9kU21hbGwoaSx0KTtyZXR1cm4gMD09PV8/SlNCSS5fX3plcm8oKTpKU0JJLl9fb25lRGlnaXQoXyxpLnNpZ24pfWNvbnN0IGU9SlNCSS5fX2Fic29sdXRlRGl2TGFyZ2UoaSxfLCExLCEwKTtyZXR1cm4gZS5zaWduPWkuc2lnbixlLl9fdHJpbSgpfXN0YXRpYyBhZGQoaSxfKXtjb25zdCB0PWkuc2lnbjtyZXR1cm4gdD09PV8uc2lnbj9KU0JJLl9fYWJzb2x1dGVBZGQoaSxfLHQpOjA8PUpTQkkuX19hYnNvbHV0ZUNvbXBhcmUoaSxfKT9KU0JJLl9fYWJzb2x1dGVTdWIoaSxfLHQpOkpTQkkuX19hYnNvbHV0ZVN1YihfLGksIXQpfXN0YXRpYyBzdWJ0cmFjdChpLF8pe2NvbnN0IHQ9aS5zaWduO3JldHVybiB0PT09Xy5zaWduPzA8PUpTQkkuX19hYnNvbHV0ZUNvbXBhcmUoaSxfKT9KU0JJLl9fYWJzb2x1dGVTdWIoaSxfLHQpOkpTQkkuX19hYnNvbHV0ZVN1YihfLGksIXQpOkpTQkkuX19hYnNvbHV0ZUFkZChpLF8sdCl9c3RhdGljIGxlZnRTaGlmdChpLF8pe3JldHVybiAwPT09Xy5sZW5ndGh8fDA9PT1pLmxlbmd0aD9pOl8uc2lnbj9KU0JJLl9fcmlnaHRTaGlmdEJ5QWJzb2x1dGUoaSxfKTpKU0JJLl9fbGVmdFNoaWZ0QnlBYnNvbHV0ZShpLF8pfXN0YXRpYyBzaWduZWRSaWdodFNoaWZ0KGksXyl7cmV0dXJuIDA9PT1fLmxlbmd0aHx8MD09PWkubGVuZ3RoP2k6Xy5zaWduP0pTQkkuX19sZWZ0U2hpZnRCeUFic29sdXRlKGksXyk6SlNCSS5fX3JpZ2h0U2hpZnRCeUFic29sdXRlKGksXyl9c3RhdGljIHVuc2lnbmVkUmlnaHRTaGlmdCgpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJCaWdJbnRzIGhhdmUgbm8gdW5zaWduZWQgcmlnaHQgc2hpZnQ7IHVzZSA+PiBpbnN0ZWFkXCIpfXN0YXRpYyBsZXNzVGhhbihpLF8pe3JldHVybiAwPkpTQkkuX19jb21wYXJlVG9CaWdJbnQoaSxfKX1zdGF0aWMgbGVzc1RoYW5PckVxdWFsKGksXyl7cmV0dXJuIDA+PUpTQkkuX19jb21wYXJlVG9CaWdJbnQoaSxfKX1zdGF0aWMgZ3JlYXRlclRoYW4oaSxfKXtyZXR1cm4gMDxKU0JJLl9fY29tcGFyZVRvQmlnSW50KGksXyl9c3RhdGljIGdyZWF0ZXJUaGFuT3JFcXVhbChpLF8pe3JldHVybiAwPD1KU0JJLl9fY29tcGFyZVRvQmlnSW50KGksXyl9c3RhdGljIGVxdWFsKF8sdCl7aWYoXy5zaWduIT09dC5zaWduKXJldHVybiExO2lmKF8ubGVuZ3RoIT09dC5sZW5ndGgpcmV0dXJuITE7Zm9yKGxldCBlPTA7ZTxfLmxlbmd0aDtlKyspaWYoXy5fX2RpZ2l0KGUpIT09dC5fX2RpZ2l0KGUpKXJldHVybiExO3JldHVybiEwfXN0YXRpYyBub3RFcXVhbChpLF8pe3JldHVybiFKU0JJLmVxdWFsKGksXyl9c3RhdGljIGJpdHdpc2VBbmQoaSxfKXt2YXIgdD1NYXRoLm1heDtpZighaS5zaWduJiYhXy5zaWduKXJldHVybiBKU0JJLl9fYWJzb2x1dGVBbmQoaSxfKS5fX3RyaW0oKTtpZihpLnNpZ24mJl8uc2lnbil7Y29uc3QgZT10KGkubGVuZ3RoLF8ubGVuZ3RoKSsxO2xldCBuPUpTQkkuX19hYnNvbHV0ZVN1Yk9uZShpLGUpO2NvbnN0IGc9SlNCSS5fX2Fic29sdXRlU3ViT25lKF8pO3JldHVybiBuPUpTQkkuX19hYnNvbHV0ZU9yKG4sZyxuKSxKU0JJLl9fYWJzb2x1dGVBZGRPbmUobiwhMCxuKS5fX3RyaW0oKX1yZXR1cm4gaS5zaWduJiYoW2ksX109W18saV0pLEpTQkkuX19hYnNvbHV0ZUFuZE5vdChpLEpTQkkuX19hYnNvbHV0ZVN1Yk9uZShfKSkuX190cmltKCl9c3RhdGljIGJpdHdpc2VYb3IoaSxfKXt2YXIgdD1NYXRoLm1heDtpZighaS5zaWduJiYhXy5zaWduKXJldHVybiBKU0JJLl9fYWJzb2x1dGVYb3IoaSxfKS5fX3RyaW0oKTtpZihpLnNpZ24mJl8uc2lnbil7Y29uc3QgZT10KGkubGVuZ3RoLF8ubGVuZ3RoKSxuPUpTQkkuX19hYnNvbHV0ZVN1Yk9uZShpLGUpLGc9SlNCSS5fX2Fic29sdXRlU3ViT25lKF8pO3JldHVybiBKU0JJLl9fYWJzb2x1dGVYb3IobixnLG4pLl9fdHJpbSgpfWNvbnN0IGU9dChpLmxlbmd0aCxfLmxlbmd0aCkrMTtpLnNpZ24mJihbaSxfXT1bXyxpXSk7bGV0IG49SlNCSS5fX2Fic29sdXRlU3ViT25lKF8sZSk7cmV0dXJuIG49SlNCSS5fX2Fic29sdXRlWG9yKG4saSxuKSxKU0JJLl9fYWJzb2x1dGVBZGRPbmUobiwhMCxuKS5fX3RyaW0oKX1zdGF0aWMgYml0d2lzZU9yKGksXyl7dmFyIHQ9TWF0aC5tYXg7Y29uc3QgZT10KGkubGVuZ3RoLF8ubGVuZ3RoKTtpZighaS5zaWduJiYhXy5zaWduKXJldHVybiBKU0JJLl9fYWJzb2x1dGVPcihpLF8pLl9fdHJpbSgpO2lmKGkuc2lnbiYmXy5zaWduKXtsZXQgdD1KU0JJLl9fYWJzb2x1dGVTdWJPbmUoaSxlKTtjb25zdCBuPUpTQkkuX19hYnNvbHV0ZVN1Yk9uZShfKTtyZXR1cm4gdD1KU0JJLl9fYWJzb2x1dGVBbmQodCxuLHQpLEpTQkkuX19hYnNvbHV0ZUFkZE9uZSh0LCEwLHQpLl9fdHJpbSgpfWkuc2lnbiYmKFtpLF9dPVtfLGldKTtsZXQgbj1KU0JJLl9fYWJzb2x1dGVTdWJPbmUoXyxlKTtyZXR1cm4gbj1KU0JJLl9fYWJzb2x1dGVBbmROb3QobixpLG4pLEpTQkkuX19hYnNvbHV0ZUFkZE9uZShuLCEwLG4pLl9fdHJpbSgpfXN0YXRpYyBhc0ludE4oXyx0KXt2YXIgaT1NYXRoLmZsb29yO2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gdDtpZihfPWkoXyksMD5fKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCB2YWx1ZTogbm90IChjb252ZXJ0aWJsZSB0bykgYSBzYWZlIGludGVnZXJcIik7aWYoMD09PV8pcmV0dXJuIEpTQkkuX196ZXJvKCk7aWYoXz49SlNCSS5fX2tNYXhMZW5ndGhCaXRzKXJldHVybiB0O2NvbnN0IGU9MHwoXysyOSkvMzA7aWYodC5sZW5ndGg8ZSlyZXR1cm4gdDtjb25zdCBnPXQuX191bnNpZ25lZERpZ2l0KGUtMSkscz0xPDwoXy0xKSUzMDtpZih0Lmxlbmd0aD09PWUmJmc8cylyZXR1cm4gdDtpZighKChnJnMpPT09cykpcmV0dXJuIEpTQkkuX190cnVuY2F0ZVRvTkJpdHMoXyx0KTtpZighdC5zaWduKXJldHVybiBKU0JJLl9fdHJ1bmNhdGVBbmRTdWJGcm9tUG93ZXJPZlR3byhfLHQsITApO2lmKDA9PShnJnMtMSkpe2ZvcihsZXQgbj1lLTI7MDw9bjtuLS0paWYoMCE9PXQuX19kaWdpdChuKSlyZXR1cm4gSlNCSS5fX3RydW5jYXRlQW5kU3ViRnJvbVBvd2VyT2ZUd28oXyx0LCExKTtyZXR1cm4gdC5sZW5ndGg9PT1lJiZnPT09cz90OkpTQkkuX190cnVuY2F0ZVRvTkJpdHMoXyx0KX1yZXR1cm4gSlNCSS5fX3RydW5jYXRlQW5kU3ViRnJvbVBvd2VyT2ZUd28oXyx0LCExKX1zdGF0aWMgYXNVaW50TihpLF8pe3ZhciB0PU1hdGguZmxvb3I7aWYoMD09PV8ubGVuZ3RoKXJldHVybiBfO2lmKGk9dChpKSwwPmkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIHZhbHVlOiBub3QgKGNvbnZlcnRpYmxlIHRvKSBhIHNhZmUgaW50ZWdlclwiKTtpZigwPT09aSlyZXR1cm4gSlNCSS5fX3plcm8oKTtpZihfLnNpZ24pe2lmKGk+SlNCSS5fX2tNYXhMZW5ndGhCaXRzKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQmlnSW50IHRvbyBiaWdcIik7cmV0dXJuIEpTQkkuX190cnVuY2F0ZUFuZFN1YkZyb21Qb3dlck9mVHdvKGksXywhMSl9aWYoaT49SlNCSS5fX2tNYXhMZW5ndGhCaXRzKXJldHVybiBfO2NvbnN0IGU9MHwoaSsyOSkvMzA7aWYoXy5sZW5ndGg8ZSlyZXR1cm4gXztjb25zdCBnPWklMzA7aWYoXy5sZW5ndGg9PWUpe2lmKDA9PT1nKXJldHVybiBfO2NvbnN0IGk9Xy5fX2RpZ2l0KGUtMSk7aWYoMD09aT4+PmcpcmV0dXJuIF99cmV0dXJuIEpTQkkuX190cnVuY2F0ZVRvTkJpdHMoaSxfKX1zdGF0aWMgQUREKGksXyl7aWYoaT1KU0JJLl9fdG9QcmltaXRpdmUoaSksXz1KU0JJLl9fdG9QcmltaXRpdmUoXyksXCJzdHJpbmdcIj09dHlwZW9mIGkpcmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIF8mJihfPV8udG9TdHJpbmcoKSksaStfO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBfKXJldHVybiBpLnRvU3RyaW5nKCkrXztpZihpPUpTQkkuX190b051bWVyaWMoaSksXz1KU0JJLl9fdG9OdW1lcmljKF8pLEpTQkkuX19pc0JpZ0ludChpKSYmSlNCSS5fX2lzQmlnSW50KF8pKXJldHVybiBKU0JJLmFkZChpLF8pO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBpJiZcIm51bWJlclwiPT10eXBlb2YgXylyZXR1cm4gaStfO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgbWl4IEJpZ0ludCBhbmQgb3RoZXIgdHlwZXMsIHVzZSBleHBsaWNpdCBjb252ZXJzaW9uc1wiKX1zdGF0aWMgTFQoaSxfKXtyZXR1cm4gSlNCSS5fX2NvbXBhcmUoaSxfLDApfXN0YXRpYyBMRShpLF8pe3JldHVybiBKU0JJLl9fY29tcGFyZShpLF8sMSl9c3RhdGljIEdUKGksXyl7cmV0dXJuIEpTQkkuX19jb21wYXJlKGksXywyKX1zdGF0aWMgR0UoaSxfKXtyZXR1cm4gSlNCSS5fX2NvbXBhcmUoaSxfLDMpfXN0YXRpYyBFUShpLF8pe2Zvcig7Oyl7aWYoSlNCSS5fX2lzQmlnSW50KGkpKXJldHVybiBKU0JJLl9faXNCaWdJbnQoXyk/SlNCSS5lcXVhbChpLF8pOkpTQkkuRVEoXyxpKTtpZihcIm51bWJlclwiPT10eXBlb2YgaSl7aWYoSlNCSS5fX2lzQmlnSW50KF8pKXJldHVybiBKU0JJLl9fZXF1YWxUb051bWJlcihfLGkpO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBfKXJldHVybiBpPT1fO189SlNCSS5fX3RvUHJpbWl0aXZlKF8pfWVsc2UgaWYoXCJzdHJpbmdcIj09dHlwZW9mIGkpe2lmKEpTQkkuX19pc0JpZ0ludChfKSlyZXR1cm4gaT1KU0JJLl9fZnJvbVN0cmluZyhpKSxudWxsIT09aSYmSlNCSS5lcXVhbChpLF8pO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBfKXJldHVybiBpPT1fO189SlNCSS5fX3RvUHJpbWl0aXZlKF8pfWVsc2UgaWYoXCJib29sZWFuXCI9PXR5cGVvZiBpKXtpZihKU0JJLl9faXNCaWdJbnQoXykpcmV0dXJuIEpTQkkuX19lcXVhbFRvTnVtYmVyKF8sK2kpO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBfKXJldHVybiBpPT1fO189SlNCSS5fX3RvUHJpbWl0aXZlKF8pfWVsc2UgaWYoXCJzeW1ib2xcIj09dHlwZW9mIGkpe2lmKEpTQkkuX19pc0JpZ0ludChfKSlyZXR1cm4hMTtpZihcIm9iamVjdFwiIT10eXBlb2YgXylyZXR1cm4gaT09XztfPUpTQkkuX190b1ByaW1pdGl2ZShfKX1lbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBpKXtpZihcIm9iamVjdFwiPT10eXBlb2YgXyYmXy5jb25zdHJ1Y3RvciE9PUpTQkkpcmV0dXJuIGk9PV87aT1KU0JJLl9fdG9QcmltaXRpdmUoaSl9ZWxzZSByZXR1cm4gaT09X319c3RhdGljIE5FKGksXyl7cmV0dXJuIUpTQkkuRVEoaSxfKX1zdGF0aWMgRGF0YVZpZXdHZXRCaWdJbnQ2NChpLF8sdD0hMSl7cmV0dXJuIEpTQkkuYXNJbnROKDY0LEpTQkkuRGF0YVZpZXdHZXRCaWdVaW50NjQoaSxfLHQpKX1zdGF0aWMgRGF0YVZpZXdHZXRCaWdVaW50NjQoaSxfLHQ9ITEpe2NvbnN0W2Usbl09dD9bNCwwXTpbMCw0XSxnPWkuZ2V0VWludDMyKF8rZSx0KSxzPWkuZ2V0VWludDMyKF8rbix0KSxvPW5ldyBKU0JJKDMsITEpO3JldHVybiBvLl9fc2V0RGlnaXQoMCwxMDczNzQxODIzJnMpLG8uX19zZXREaWdpdCgxLCgyNjg0MzU0NTUmZyk8PDJ8cz4+PjMwKSxvLl9fc2V0RGlnaXQoMixnPj4+MjgpLG8uX190cmltKCl9c3RhdGljIERhdGFWaWV3U2V0QmlnSW50NjQoaSxfLHQsZT0hMSl7SlNCSS5EYXRhVmlld1NldEJpZ1VpbnQ2NChpLF8sdCxlKX1zdGF0aWMgRGF0YVZpZXdTZXRCaWdVaW50NjQoaSxfLHQsZT0hMSl7dD1KU0JJLmFzVWludE4oNjQsdCk7bGV0IG49MCxnPTA7aWYoMDx0Lmxlbmd0aCYmKGc9dC5fX2RpZ2l0KDApLDE8dC5sZW5ndGgpKXtjb25zdCBpPXQuX19kaWdpdCgxKTtnfD1pPDwzMCxuPWk+Pj4yLDI8dC5sZW5ndGgmJihufD10Ll9fZGlnaXQoMik8PDI4KX1jb25zdFtzLG9dPWU/WzQsMF06WzAsNF07aS5zZXRVaW50MzIoXytzLG4sZSksaS5zZXRVaW50MzIoXytvLGcsZSl9c3RhdGljIF9femVybygpe3JldHVybiBuZXcgSlNCSSgwLCExKX1zdGF0aWMgX19vbmVEaWdpdChpLF8pe2NvbnN0IHQ9bmV3IEpTQkkoMSxfKTtyZXR1cm4gdC5fX3NldERpZ2l0KDAsaSksdH1fX2NvcHkoKXtjb25zdCBfPW5ldyBKU0JJKHRoaXMubGVuZ3RoLHRoaXMuc2lnbik7Zm9yKGxldCB0PTA7dDx0aGlzLmxlbmd0aDt0KyspX1t0XT10aGlzW3RdO3JldHVybiBffV9fdHJpbSgpe2xldCBpPXRoaXMubGVuZ3RoLF89dGhpc1tpLTFdO2Zvcig7MD09PV87KWktLSxfPXRoaXNbaS0xXSx0aGlzLnBvcCgpO3JldHVybiAwPT09aSYmKHRoaXMuc2lnbj0hMSksdGhpc31fX2luaXRpYWxpemVEaWdpdHMoKXtmb3IobGV0IF89MDtfPHRoaXMubGVuZ3RoO18rKyl0aGlzW19dPTB9c3RhdGljIF9fZGVjaWRlUm91bmRpbmcoaSxfLHQsZSl7aWYoMDxfKXJldHVybi0xO2xldCBuO2lmKDA+XyluPS1fLTE7ZWxzZXtpZigwPT09dClyZXR1cm4tMTt0LS0sZT1pLl9fZGlnaXQodCksbj0yOX1sZXQgZz0xPDxuO2lmKDA9PShlJmcpKXJldHVybi0xO2lmKGctPTEsMCE9KGUmZykpcmV0dXJuIDE7Zm9yKDswPHQ7KWlmKHQtLSwwIT09aS5fX2RpZ2l0KHQpKXJldHVybiAxO3JldHVybiAwfXN0YXRpYyBfX2Zyb21Eb3VibGUoaSl7SlNCSS5fX2tCaXRDb252ZXJzaW9uRG91YmxlWzBdPWk7Y29uc3QgXz0yMDQ3JkpTQkkuX19rQml0Q29udmVyc2lvbkludHNbMV0+Pj4yMCx0PV8tMTAyMyxlPSgwfHQvMzApKzEsbj1uZXcgSlNCSShlLDA+aSk7bGV0IGc9MTA0ODU3NSZKU0JJLl9fa0JpdENvbnZlcnNpb25JbnRzWzFdfDEwNDg1NzYscz1KU0JJLl9fa0JpdENvbnZlcnNpb25JbnRzWzBdO2NvbnN0IG89MjAsbD10JTMwO2xldCByLGE9MDtpZihsPDIwKXtjb25zdCBpPW8tbDthPWkrMzIscj1nPj4+aSxnPWc8PDMyLWl8cz4+Pmksczw8PTMyLWl9ZWxzZSBpZihsPT09MjApYT0zMixyPWcsZz1zLHM9MDtlbHNle2NvbnN0IGk9bC1vO2E9MzItaSxyPWc8PGl8cz4+PjMyLWksZz1zPDxpLHM9MH1uLl9fc2V0RGlnaXQoZS0xLHIpO2ZvcihsZXQgXz1lLTI7MDw9XztfLS0pMDxhPyhhLT0zMCxyPWc+Pj4yLGc9Zzw8MzB8cz4+PjIsczw8PTMwKTpyPTAsbi5fX3NldERpZ2l0KF8scik7cmV0dXJuIG4uX190cmltKCl9c3RhdGljIF9faXNXaGl0ZXNwYWNlKGkpe3JldHVybiEhKDEzPj1pJiY5PD1pKXx8KDE1OT49aT8zMj09aToxMzEwNzE+PWk/MTYwPT1pfHw1NzYwPT1pOjE5NjYwNz49aT8oaSY9MTMxMDcxLDEwPj1pfHw0MD09aXx8NDE9PWl8fDQ3PT1pfHw5NT09aXx8NDA5Nj09aSk6NjUyNzk9PWkpfXN0YXRpYyBfX2Zyb21TdHJpbmcoaSxfPTApe2xldCB0PTA7Y29uc3QgZT1pLmxlbmd0aDtsZXQgbj0wO2lmKG49PT1lKXJldHVybiBKU0JJLl9femVybygpO2xldCBnPWkuY2hhckNvZGVBdChuKTtmb3IoO0pTQkkuX19pc1doaXRlc3BhY2UoZyk7KXtpZigrK249PT1lKXJldHVybiBKU0JJLl9femVybygpO2c9aS5jaGFyQ29kZUF0KG4pfWlmKDQzPT09Zyl7aWYoKytuPT09ZSlyZXR1cm4gbnVsbDtnPWkuY2hhckNvZGVBdChuKSx0PTF9ZWxzZSBpZig0NT09PWcpe2lmKCsrbj09PWUpcmV0dXJuIG51bGw7Zz1pLmNoYXJDb2RlQXQobiksdD0tMX1pZigwPT09Xyl7aWYoXz0xMCw0OD09PWcpe2lmKCsrbj09PWUpcmV0dXJuIEpTQkkuX196ZXJvKCk7aWYoZz1pLmNoYXJDb2RlQXQobiksODg9PT1nfHwxMjA9PT1nKXtpZihfPTE2LCsrbj09PWUpcmV0dXJuIG51bGw7Zz1pLmNoYXJDb2RlQXQobil9ZWxzZSBpZig3OT09PWd8fDExMT09PWcpe2lmKF89OCwrK249PT1lKXJldHVybiBudWxsO2c9aS5jaGFyQ29kZUF0KG4pfWVsc2UgaWYoNjY9PT1nfHw5OD09PWcpe2lmKF89MiwrK249PT1lKXJldHVybiBudWxsO2c9aS5jaGFyQ29kZUF0KG4pfX19ZWxzZSBpZigxNj09PV8mJjQ4PT09Zyl7aWYoKytuPT09ZSlyZXR1cm4gSlNCSS5fX3plcm8oKTtpZihnPWkuY2hhckNvZGVBdChuKSw4OD09PWd8fDEyMD09PWcpe2lmKCsrbj09PWUpcmV0dXJuIG51bGw7Zz1pLmNoYXJDb2RlQXQobil9fWlmKDAhPXQmJjEwIT09XylyZXR1cm4gbnVsbDtmb3IoOzQ4PT09Zzspe2lmKCsrbj09PWUpcmV0dXJuIEpTQkkuX196ZXJvKCk7Zz1pLmNoYXJDb2RlQXQobil9Y29uc3Qgcz1lLW47bGV0IG89SlNCSS5fX2tNYXhCaXRzUGVyQ2hhcltfXSxsPUpTQkkuX19rQml0c1BlckNoYXJUYWJsZU11bHRpcGxpZXItMTtpZihzPjEwNzM3NDE4MjQvbylyZXR1cm4gbnVsbDtjb25zdCByPW8qcytsPj4+SlNCSS5fX2tCaXRzUGVyQ2hhclRhYmxlU2hpZnQsYT1uZXcgSlNCSSgwfChyKzI5KS8zMCwhMSksdT0xMD5fP186MTAsaD0xMDxfP18tMTA6MDtpZigwPT0oXyZfLTEpKXtvPj49SlNCSS5fX2tCaXRzUGVyQ2hhclRhYmxlU2hpZnQ7Y29uc3QgXz1bXSx0PVtdO2xldCBzPSExO2Rve2xldCBsPTAscj0wO2Zvcig7Oyl7bGV0IF87aWYoZy00OD4+PjA8dSlfPWctNDg7ZWxzZSBpZigoMzJ8ZyktOTc+Pj4wPGgpXz0oMzJ8ZyktODc7ZWxzZXtzPSEwO2JyZWFrfWlmKHIrPW8sbD1sPDxvfF8sKytuPT09ZSl7cz0hMDticmVha31pZihnPWkuY2hhckNvZGVBdChuKSwzMDxyK28pYnJlYWt9Xy5wdXNoKGwpLHQucHVzaChyKX13aGlsZSghcyk7SlNCSS5fX2ZpbGxGcm9tUGFydHMoYSxfLHQpfWVsc2V7YS5fX2luaXRpYWxpemVEaWdpdHMoKTtsZXQgdD0hMSxzPTA7ZG97bGV0IHI9MCxiPTE7Zm9yKDs7KXtsZXQgbztpZihnLTQ4Pj4+MDx1KW89Zy00ODtlbHNlIGlmKCgzMnxnKS05Nz4+PjA8aClvPSgzMnxnKS04NztlbHNle3Q9ITA7YnJlYWt9Y29uc3QgbD1iKl87aWYoMTA3Mzc0MTgyMzxsKWJyZWFrO2lmKGI9bCxyPXIqXytvLHMrKywrK249PT1lKXt0PSEwO2JyZWFrfWc9aS5jaGFyQ29kZUF0KG4pfWw9MzAqSlNCSS5fX2tCaXRzUGVyQ2hhclRhYmxlTXVsdGlwbGllci0xO2NvbnN0IEQ9MHwobypzK2w+Pj5KU0JJLl9fa0JpdHNQZXJDaGFyVGFibGVTaGlmdCkvMzA7YS5fX2lucGxhY2VNdWx0aXBseUFkZChiLHIsRCl9d2hpbGUoIXQpfWlmKG4hPT1lKXtpZighSlNCSS5fX2lzV2hpdGVzcGFjZShnKSlyZXR1cm4gbnVsbDtmb3IobisrO248ZTtuKyspaWYoZz1pLmNoYXJDb2RlQXQobiksIUpTQkkuX19pc1doaXRlc3BhY2UoZykpcmV0dXJuIG51bGx9cmV0dXJuIGEuc2lnbj0tMT09dCxhLl9fdHJpbSgpfXN0YXRpYyBfX2ZpbGxGcm9tUGFydHMoXyx0LGUpe2xldCBuPTAsZz0wLHM9MDtmb3IobGV0IG89dC5sZW5ndGgtMTswPD1vO28tLSl7Y29uc3QgaT10W29dLGw9ZVtvXTtnfD1pPDxzLHMrPWwsMzA9PT1zPyhfLl9fc2V0RGlnaXQobisrLGcpLHM9MCxnPTApOjMwPHMmJihfLl9fc2V0RGlnaXQobisrLDEwNzM3NDE4MjMmZykscy09MzAsZz1pPj4+bC1zKX1pZigwIT09Zyl7aWYobj49Xy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiaW1wbGVtZW50YXRpb24gYnVnXCIpO18uX19zZXREaWdpdChuKyssZyl9Zm9yKDtuPF8ubGVuZ3RoO24rKylfLl9fc2V0RGlnaXQobiwwKX1zdGF0aWMgX190b1N0cmluZ0Jhc2VQb3dlck9mVHdvKF8saSl7Y29uc3QgdD1fLmxlbmd0aDtsZXQgZT1pLTE7ZT0oODUmZT4+PjEpKyg4NSZlKSxlPSg1MSZlPj4+MikrKDUxJmUpLGU9KDE1JmU+Pj40KSsoMTUmZSk7Y29uc3Qgbj1lLGc9aS0xLHM9Xy5fX2RpZ2l0KHQtMSksbz1KU0JJLl9fY2x6MzAocyk7bGV0IGw9MHwoMzAqdC1vK24tMSkvbjtpZihfLnNpZ24mJmwrKywyNjg0MzU0NTY8bCl0aHJvdyBuZXcgRXJyb3IoXCJzdHJpbmcgdG9vIGxvbmdcIik7Y29uc3Qgcj1BcnJheShsKTtsZXQgYT1sLTEsdT0wLGQ9MDtmb3IobGV0IGU9MDtlPHQtMTtlKyspe2NvbnN0IGk9Xy5fX2RpZ2l0KGUpLHQ9KHV8aTw8ZCkmZztyW2EtLV09SlNCSS5fX2tDb252ZXJzaW9uQ2hhcnNbdF07Y29uc3Qgcz1uLWQ7Zm9yKHU9aT4+PnMsZD0zMC1zO2Q+PW47KXJbYS0tXT1KU0JJLl9fa0NvbnZlcnNpb25DaGFyc1t1JmddLHU+Pj49bixkLT1ufWNvbnN0IGg9KHV8czw8ZCkmZztmb3IoclthLS1dPUpTQkkuX19rQ29udmVyc2lvbkNoYXJzW2hdLHU9cz4+Pm4tZDswIT09dTspclthLS1dPUpTQkkuX19rQ29udmVyc2lvbkNoYXJzW3UmZ10sdT4+Pj1uO2lmKF8uc2lnbiYmKHJbYS0tXT1cIi1cIiksLTEhPWEpdGhyb3cgbmV3IEVycm9yKFwiaW1wbGVtZW50YXRpb24gYnVnXCIpO3JldHVybiByLmpvaW4oXCJcIil9c3RhdGljIF9fdG9TdHJpbmdHZW5lcmljKF8saSx0KXtjb25zdCBlPV8ubGVuZ3RoO2lmKDA9PT1lKXJldHVyblwiXCI7aWYoMT09PWUpe2xldCBlPV8uX191bnNpZ25lZERpZ2l0KDApLnRvU3RyaW5nKGkpO3JldHVybiExPT09dCYmXy5zaWduJiYoZT1cIi1cIitlKSxlfWNvbnN0IG49MzAqZS1KU0JJLl9fY2x6MzAoXy5fX2RpZ2l0KGUtMSkpLGc9SlNCSS5fX2tNYXhCaXRzUGVyQ2hhcltpXSxzPWctMTtsZXQgbz1uKkpTQkkuX19rQml0c1BlckNoYXJUYWJsZU11bHRpcGxpZXI7bys9cy0xLG89MHxvL3M7Y29uc3QgbD1vKzE+PjEscj1KU0JJLmV4cG9uZW50aWF0ZShKU0JJLl9fb25lRGlnaXQoaSwhMSksSlNCSS5fX29uZURpZ2l0KGwsITEpKTtsZXQgYSx1O2NvbnN0IGQ9ci5fX3Vuc2lnbmVkRGlnaXQoMCk7aWYoMT09PXIubGVuZ3RoJiYzMjc2Nz49ZCl7YT1uZXcgSlNCSShfLmxlbmd0aCwhMSksYS5fX2luaXRpYWxpemVEaWdpdHMoKTtsZXQgdD0wO2ZvcihsZXQgZT0yKl8ubGVuZ3RoLTE7MDw9ZTtlLS0pe2NvbnN0IGk9dDw8MTV8Xy5fX2hhbGZEaWdpdChlKTthLl9fc2V0SGFsZkRpZ2l0KGUsMHxpL2QpLHQ9MHxpJWR9dT10LnRvU3RyaW5nKGkpfWVsc2V7Y29uc3QgdD1KU0JJLl9fYWJzb2x1dGVEaXZMYXJnZShfLHIsITAsITApO2E9dC5xdW90aWVudDtjb25zdCBlPXQucmVtYWluZGVyLl9fdHJpbSgpO3U9SlNCSS5fX3RvU3RyaW5nR2VuZXJpYyhlLGksITApfWEuX190cmltKCk7bGV0IGg9SlNCSS5fX3RvU3RyaW5nR2VuZXJpYyhhLGksITApO2Zvcig7dS5sZW5ndGg8bDspdT1cIjBcIit1O3JldHVybiExPT09dCYmXy5zaWduJiYoaD1cIi1cIitoKSxoK3V9c3RhdGljIF9fdW5lcXVhbFNpZ24oaSl7cmV0dXJuIGk/LTE6MX1zdGF0aWMgX19hYnNvbHV0ZUdyZWF0ZXIoaSl7cmV0dXJuIGk/LTE6MX1zdGF0aWMgX19hYnNvbHV0ZUxlc3MoaSl7cmV0dXJuIGk/MTotMX1zdGF0aWMgX19jb21wYXJlVG9CaWdJbnQoaSxfKXtjb25zdCB0PWkuc2lnbjtpZih0IT09Xy5zaWduKXJldHVybiBKU0JJLl9fdW5lcXVhbFNpZ24odCk7Y29uc3QgZT1KU0JJLl9fYWJzb2x1dGVDb21wYXJlKGksXyk7cmV0dXJuIDA8ZT9KU0JJLl9fYWJzb2x1dGVHcmVhdGVyKHQpOjA+ZT9KU0JJLl9fYWJzb2x1dGVMZXNzKHQpOjB9c3RhdGljIF9fY29tcGFyZVRvTnVtYmVyKGksXyl7aWYoSlNCSS5fX2lzT25lRGlnaXRJbnQoXykpe2NvbnN0IHQ9aS5zaWduLGU9MD5fO2lmKHQhPT1lKXJldHVybiBKU0JJLl9fdW5lcXVhbFNpZ24odCk7aWYoMD09PWkubGVuZ3RoKXtpZihlKXRocm93IG5ldyBFcnJvcihcImltcGxlbWVudGF0aW9uIGJ1Z1wiKTtyZXR1cm4gMD09PV8/MDotMX1pZigxPGkubGVuZ3RoKXJldHVybiBKU0JJLl9fYWJzb2x1dGVHcmVhdGVyKHQpO2NvbnN0IG49TWF0aC5hYnMoXyksZz1pLl9fdW5zaWduZWREaWdpdCgwKTtyZXR1cm4gZz5uP0pTQkkuX19hYnNvbHV0ZUdyZWF0ZXIodCk6ZzxuP0pTQkkuX19hYnNvbHV0ZUxlc3ModCk6MH1yZXR1cm4gSlNCSS5fX2NvbXBhcmVUb0RvdWJsZShpLF8pfXN0YXRpYyBfX2NvbXBhcmVUb0RvdWJsZShpLF8pe2lmKF8hPT1fKXJldHVybiBfO2lmKF89PT0xLzApcmV0dXJuLTE7aWYoXz09PS1JbmZpbml0eSlyZXR1cm4gMTtjb25zdCB0PWkuc2lnbjtpZih0IT09MD5fKXJldHVybiBKU0JJLl9fdW5lcXVhbFNpZ24odCk7aWYoMD09PV8pdGhyb3cgbmV3IEVycm9yKFwiaW1wbGVtZW50YXRpb24gYnVnOiBzaG91bGQgYmUgaGFuZGxlZCBlbHNld2hlcmVcIik7aWYoMD09PWkubGVuZ3RoKXJldHVybi0xO0pTQkkuX19rQml0Q29udmVyc2lvbkRvdWJsZVswXT1fO2NvbnN0IGU9MjA0NyZKU0JJLl9fa0JpdENvbnZlcnNpb25JbnRzWzFdPj4+MjA7aWYoMjA0Nz09ZSl0aHJvdyBuZXcgRXJyb3IoXCJpbXBsZW1lbnRhdGlvbiBidWc6IGhhbmRsZWQgZWxzZXdoZXJlXCIpO2NvbnN0IG49ZS0xMDIzO2lmKDA+bilyZXR1cm4gSlNCSS5fX2Fic29sdXRlR3JlYXRlcih0KTtjb25zdCBnPWkubGVuZ3RoO2xldCBzPWkuX19kaWdpdChnLTEpO2NvbnN0IG89SlNCSS5fX2NsejMwKHMpLGw9MzAqZy1vLHI9bisxO2lmKGw8cilyZXR1cm4gSlNCSS5fX2Fic29sdXRlTGVzcyh0KTtpZihsPnIpcmV0dXJuIEpTQkkuX19hYnNvbHV0ZUdyZWF0ZXIodCk7bGV0IGE9MTA0ODU3NnwxMDQ4NTc1JkpTQkkuX19rQml0Q29udmVyc2lvbkludHNbMV0sdT1KU0JJLl9fa0JpdENvbnZlcnNpb25JbnRzWzBdO2NvbnN0IGQ9MjAsaD0yOS1vO2lmKGghPT0oMHwobC0xKSUzMCkpdGhyb3cgbmV3IEVycm9yKFwiaW1wbGVtZW50YXRpb24gYnVnXCIpO2xldCBtLGI9MDtpZigyMD5oKXtjb25zdCBpPWQtaDtiPWkrMzIsbT1hPj4+aSxhPWE8PDMyLWl8dT4+PmksdTw8PTMyLWl9ZWxzZSBpZigyMD09PWgpYj0zMixtPWEsYT11LHU9MDtlbHNle2NvbnN0IGk9aC1kO2I9MzItaSxtPWE8PGl8dT4+PjMyLWksYT11PDxpLHU9MH1pZihzPj4+PTAsbT4+Pj0wLHM+bSlyZXR1cm4gSlNCSS5fX2Fic29sdXRlR3JlYXRlcih0KTtpZihzPG0pcmV0dXJuIEpTQkkuX19hYnNvbHV0ZUxlc3ModCk7Zm9yKGxldCBlPWctMjswPD1lO2UtLSl7MDxiPyhiLT0zMCxtPWE+Pj4yLGE9YTw8MzB8dT4+PjIsdTw8PTMwKTptPTA7Y29uc3QgXz1pLl9fdW5zaWduZWREaWdpdChlKTtpZihfPm0pcmV0dXJuIEpTQkkuX19hYnNvbHV0ZUdyZWF0ZXIodCk7aWYoXzxtKXJldHVybiBKU0JJLl9fYWJzb2x1dGVMZXNzKHQpfWlmKDAhPT1hfHwwIT09dSl7aWYoMD09PWIpdGhyb3cgbmV3IEVycm9yKFwiaW1wbGVtZW50YXRpb24gYnVnXCIpO3JldHVybiBKU0JJLl9fYWJzb2x1dGVMZXNzKHQpfXJldHVybiAwfXN0YXRpYyBfX2VxdWFsVG9OdW1iZXIoaSxfKXt2YXIgdD1NYXRoLmFicztyZXR1cm4gSlNCSS5fX2lzT25lRGlnaXRJbnQoXyk/MD09PV8/MD09PWkubGVuZ3RoOjE9PT1pLmxlbmd0aCYmaS5zaWduPT09MD5fJiZpLl9fdW5zaWduZWREaWdpdCgwKT09PXQoXyk6MD09PUpTQkkuX19jb21wYXJlVG9Eb3VibGUoaSxfKX1zdGF0aWMgX19jb21wYXJpc29uUmVzdWx0VG9Cb29sKGksXyl7cmV0dXJuIDA9PT1fPzA+aToxPT09Xz8wPj1pOjI9PT1fPzA8aTozPT09Xz8wPD1pOnZvaWQgMH1zdGF0aWMgX19jb21wYXJlKGksXyx0KXtpZihpPUpTQkkuX190b1ByaW1pdGl2ZShpKSxfPUpTQkkuX190b1ByaW1pdGl2ZShfKSxcInN0cmluZ1wiPT10eXBlb2YgaSYmXCJzdHJpbmdcIj09dHlwZW9mIF8pc3dpdGNoKHQpe2Nhc2UgMDpyZXR1cm4gaTxfO2Nhc2UgMTpyZXR1cm4gaTw9XztjYXNlIDI6cmV0dXJuIGk+XztjYXNlIDM6cmV0dXJuIGk+PV87fWlmKEpTQkkuX19pc0JpZ0ludChpKSYmXCJzdHJpbmdcIj09dHlwZW9mIF8pcmV0dXJuIF89SlNCSS5fX2Zyb21TdHJpbmcoXyksbnVsbCE9PV8mJkpTQkkuX19jb21wYXJpc29uUmVzdWx0VG9Cb29sKEpTQkkuX19jb21wYXJlVG9CaWdJbnQoaSxfKSx0KTtpZihcInN0cmluZ1wiPT10eXBlb2YgaSYmSlNCSS5fX2lzQmlnSW50KF8pKXJldHVybiBpPUpTQkkuX19mcm9tU3RyaW5nKGkpLG51bGwhPT1pJiZKU0JJLl9fY29tcGFyaXNvblJlc3VsdFRvQm9vbChKU0JJLl9fY29tcGFyZVRvQmlnSW50KGksXyksdCk7aWYoaT1KU0JJLl9fdG9OdW1lcmljKGkpLF89SlNCSS5fX3RvTnVtZXJpYyhfKSxKU0JJLl9faXNCaWdJbnQoaSkpe2lmKEpTQkkuX19pc0JpZ0ludChfKSlyZXR1cm4gSlNCSS5fX2NvbXBhcmlzb25SZXN1bHRUb0Jvb2woSlNCSS5fX2NvbXBhcmVUb0JpZ0ludChpLF8pLHQpO2lmKFwibnVtYmVyXCIhPXR5cGVvZiBfKXRocm93IG5ldyBFcnJvcihcImltcGxlbWVudGF0aW9uIGJ1Z1wiKTtyZXR1cm4gSlNCSS5fX2NvbXBhcmlzb25SZXN1bHRUb0Jvb2woSlNCSS5fX2NvbXBhcmVUb051bWJlcihpLF8pLHQpfWlmKFwibnVtYmVyXCIhPXR5cGVvZiBpKXRocm93IG5ldyBFcnJvcihcImltcGxlbWVudGF0aW9uIGJ1Z1wiKTtpZihKU0JJLl9faXNCaWdJbnQoXykpcmV0dXJuIEpTQkkuX19jb21wYXJpc29uUmVzdWx0VG9Cb29sKEpTQkkuX19jb21wYXJlVG9OdW1iZXIoXyxpKSwyXnQpO2lmKFwibnVtYmVyXCIhPXR5cGVvZiBfKXRocm93IG5ldyBFcnJvcihcImltcGxlbWVudGF0aW9uIGJ1Z1wiKTtyZXR1cm4gMD09PXQ/aTxfOjE9PT10P2k8PV86Mj09PXQ/aT5fOjM9PT10P2k+PV86dm9pZCAwfV9fY2x6bXNkKCl7cmV0dXJuIEpTQkkuX19jbHozMCh0aGlzLl9fZGlnaXQodGhpcy5sZW5ndGgtMSkpfXN0YXRpYyBfX2Fic29sdXRlQWRkKF8sdCxlKXtpZihfLmxlbmd0aDx0Lmxlbmd0aClyZXR1cm4gSlNCSS5fX2Fic29sdXRlQWRkKHQsXyxlKTtpZigwPT09Xy5sZW5ndGgpcmV0dXJuIF87aWYoMD09PXQubGVuZ3RoKXJldHVybiBfLnNpZ249PT1lP186SlNCSS51bmFyeU1pbnVzKF8pO2xldCBuPV8ubGVuZ3RoOygwPT09Xy5fX2Nsem1zZCgpfHx0Lmxlbmd0aD09PV8ubGVuZ3RoJiYwPT09dC5fX2Nsem1zZCgpKSYmbisrO2NvbnN0IGc9bmV3IEpTQkkobixlKTtsZXQgcz0wLG89MDtmb3IoO288dC5sZW5ndGg7bysrKXtjb25zdCBpPV8uX19kaWdpdChvKSt0Ll9fZGlnaXQobykrcztzPWk+Pj4zMCxnLl9fc2V0RGlnaXQobywxMDczNzQxODIzJmkpfWZvcig7bzxfLmxlbmd0aDtvKyspe2NvbnN0IGk9Xy5fX2RpZ2l0KG8pK3M7cz1pPj4+MzAsZy5fX3NldERpZ2l0KG8sMTA3Mzc0MTgyMyZpKX1yZXR1cm4gbzxnLmxlbmd0aCYmZy5fX3NldERpZ2l0KG8scyksZy5fX3RyaW0oKX1zdGF0aWMgX19hYnNvbHV0ZVN1YihfLHQsZSl7aWYoMD09PV8ubGVuZ3RoKXJldHVybiBfO2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gXy5zaWduPT09ZT9fOkpTQkkudW5hcnlNaW51cyhfKTtjb25zdCBuPW5ldyBKU0JJKF8ubGVuZ3RoLGUpO2xldCBnPTAscz0wO2Zvcig7czx0Lmxlbmd0aDtzKyspe2NvbnN0IGk9Xy5fX2RpZ2l0KHMpLXQuX19kaWdpdChzKS1nO2c9MSZpPj4+MzAsbi5fX3NldERpZ2l0KHMsMTA3Mzc0MTgyMyZpKX1mb3IoO3M8Xy5sZW5ndGg7cysrKXtjb25zdCBpPV8uX19kaWdpdChzKS1nO2c9MSZpPj4+MzAsbi5fX3NldERpZ2l0KHMsMTA3Mzc0MTgyMyZpKX1yZXR1cm4gbi5fX3RyaW0oKX1zdGF0aWMgX19hYnNvbHV0ZUFkZE9uZShfLGksdD1udWxsKXtjb25zdCBlPV8ubGVuZ3RoO251bGw9PT10P3Q9bmV3IEpTQkkoZSxpKTp0LnNpZ249aTtsZXQgbj0xO2ZvcihsZXQgZz0wO2c8ZTtnKyspe2NvbnN0IGk9Xy5fX2RpZ2l0KGcpK247bj1pPj4+MzAsdC5fX3NldERpZ2l0KGcsMTA3Mzc0MTgyMyZpKX1yZXR1cm4gMCE9biYmdC5fX3NldERpZ2l0R3JvdyhlLDEpLHR9c3RhdGljIF9fYWJzb2x1dGVTdWJPbmUoXyx0KXtjb25zdCBlPV8ubGVuZ3RoO3Q9dHx8ZTtjb25zdCBuPW5ldyBKU0JJKHQsITEpO2xldCBnPTE7Zm9yKGxldCBzPTA7czxlO3MrKyl7Y29uc3QgaT1fLl9fZGlnaXQocyktZztnPTEmaT4+PjMwLG4uX19zZXREaWdpdChzLDEwNzM3NDE4MjMmaSl9aWYoMCE9Zyl0aHJvdyBuZXcgRXJyb3IoXCJpbXBsZW1lbnRhdGlvbiBidWdcIik7Zm9yKGxldCBnPWU7Zzx0O2crKyluLl9fc2V0RGlnaXQoZywwKTtyZXR1cm4gbn1zdGF0aWMgX19hYnNvbHV0ZUFuZChfLHQsZT1udWxsKXtsZXQgbj1fLmxlbmd0aCxnPXQubGVuZ3RoLHM9ZztpZihuPGcpe3M9bjtjb25zdCBpPV8sZT1uO189dCxuPWcsdD1pLGc9ZX1sZXQgbz1zO251bGw9PT1lP2U9bmV3IEpTQkkobywhMSk6bz1lLmxlbmd0aDtsZXQgbD0wO2Zvcig7bDxzO2wrKyllLl9fc2V0RGlnaXQobCxfLl9fZGlnaXQobCkmdC5fX2RpZ2l0KGwpKTtmb3IoO2w8bztsKyspZS5fX3NldERpZ2l0KGwsMCk7cmV0dXJuIGV9c3RhdGljIF9fYWJzb2x1dGVBbmROb3QoXyx0LGU9bnVsbCl7Y29uc3Qgbj1fLmxlbmd0aCxnPXQubGVuZ3RoO2xldCBzPWc7bjxnJiYocz1uKTtsZXQgbz1uO251bGw9PT1lP2U9bmV3IEpTQkkobywhMSk6bz1lLmxlbmd0aDtsZXQgbD0wO2Zvcig7bDxzO2wrKyllLl9fc2V0RGlnaXQobCxfLl9fZGlnaXQobCkmfnQuX19kaWdpdChsKSk7Zm9yKDtsPG47bCsrKWUuX19zZXREaWdpdChsLF8uX19kaWdpdChsKSk7Zm9yKDtsPG87bCsrKWUuX19zZXREaWdpdChsLDApO3JldHVybiBlfXN0YXRpYyBfX2Fic29sdXRlT3IoXyx0LGU9bnVsbCl7bGV0IG49Xy5sZW5ndGgsZz10Lmxlbmd0aCxzPWc7aWYobjxnKXtzPW47Y29uc3QgaT1fLGU9bjtfPXQsbj1nLHQ9aSxnPWV9bGV0IG89bjtudWxsPT09ZT9lPW5ldyBKU0JJKG8sITEpOm89ZS5sZW5ndGg7bGV0IGw9MDtmb3IoO2w8cztsKyspZS5fX3NldERpZ2l0KGwsXy5fX2RpZ2l0KGwpfHQuX19kaWdpdChsKSk7Zm9yKDtsPG47bCsrKWUuX19zZXREaWdpdChsLF8uX19kaWdpdChsKSk7Zm9yKDtsPG87bCsrKWUuX19zZXREaWdpdChsLDApO3JldHVybiBlfXN0YXRpYyBfX2Fic29sdXRlWG9yKF8sdCxlPW51bGwpe2xldCBuPV8ubGVuZ3RoLGc9dC5sZW5ndGgscz1nO2lmKG48Zyl7cz1uO2NvbnN0IGk9XyxlPW47Xz10LG49Zyx0PWksZz1lfWxldCBvPW47bnVsbD09PWU/ZT1uZXcgSlNCSShvLCExKTpvPWUubGVuZ3RoO2xldCBsPTA7Zm9yKDtsPHM7bCsrKWUuX19zZXREaWdpdChsLF8uX19kaWdpdChsKV50Ll9fZGlnaXQobCkpO2Zvcig7bDxuO2wrKyllLl9fc2V0RGlnaXQobCxfLl9fZGlnaXQobCkpO2Zvcig7bDxvO2wrKyllLl9fc2V0RGlnaXQobCwwKTtyZXR1cm4gZX1zdGF0aWMgX19hYnNvbHV0ZUNvbXBhcmUoXyx0KXtjb25zdCBlPV8ubGVuZ3RoLXQubGVuZ3RoO2lmKDAhPWUpcmV0dXJuIGU7bGV0IG49Xy5sZW5ndGgtMTtmb3IoOzA8PW4mJl8uX19kaWdpdChuKT09PXQuX19kaWdpdChuKTspbi0tO3JldHVybiAwPm4/MDpfLl9fdW5zaWduZWREaWdpdChuKT50Ll9fdW5zaWduZWREaWdpdChuKT8xOi0xfXN0YXRpYyBfX211bHRpcGx5QWNjdW11bGF0ZShfLHQsZSxuKXtpZigwPT09dClyZXR1cm47Y29uc3QgZz0zMjc2NyZ0LHM9dD4+PjE1O2xldCBvPTAsbD0wO2ZvcihsZXQgcixhPTA7YTxfLmxlbmd0aDthKyssbisrKXtyPWUuX19kaWdpdChuKTtjb25zdCBpPV8uX19kaWdpdChhKSx0PTMyNzY3JmksdT1pPj4+MTUsZD1KU0JJLl9faW11bCh0LGcpLGg9SlNCSS5fX2ltdWwodCxzKSxtPUpTQkkuX19pbXVsKHUsZyksYj1KU0JJLl9faW11bCh1LHMpO3IrPWwrZCtvLG89cj4+PjMwLHImPTEwNzM3NDE4MjMscis9KCgzMjc2NyZoKTw8MTUpKygoMzI3NjcmbSk8PDE1KSxvKz1yPj4+MzAsbD1iKyhoPj4+MTUpKyhtPj4+MTUpLGUuX19zZXREaWdpdChuLDEwNzM3NDE4MjMmcil9Zm9yKDswIT1vfHwwIT09bDtuKyspe2xldCBpPWUuX19kaWdpdChuKTtpKz1vK2wsbD0wLG89aT4+PjMwLGUuX19zZXREaWdpdChuLDEwNzM3NDE4MjMmaSl9fXN0YXRpYyBfX2ludGVybmFsTXVsdGlwbHlBZGQoXyx0LGUsZyxzKXtsZXQgbz1lLGw9MDtmb3IobGV0IG49MDtuPGc7bisrKXtjb25zdCBpPV8uX19kaWdpdChuKSxlPUpTQkkuX19pbXVsKDMyNzY3JmksdCksZz1KU0JJLl9faW11bChpPj4+MTUsdCksYT1lKygoMzI3NjcmZyk8PDE1KStsK287bz1hPj4+MzAsbD1nPj4+MTUscy5fX3NldERpZ2l0KG4sMTA3Mzc0MTgyMyZhKX1pZihzLmxlbmd0aD5nKWZvcihzLl9fc2V0RGlnaXQoZysrLG8rbCk7ZzxzLmxlbmd0aDspcy5fX3NldERpZ2l0KGcrKywwKTtlbHNlIGlmKDAhPT1vK2wpdGhyb3cgbmV3IEVycm9yKFwiaW1wbGVtZW50YXRpb24gYnVnXCIpfV9faW5wbGFjZU11bHRpcGx5QWRkKGksXyx0KXt0PnRoaXMubGVuZ3RoJiYodD10aGlzLmxlbmd0aCk7Y29uc3QgZT0zMjc2NyZpLG49aT4+PjE1O2xldCBnPTAscz1fO2ZvcihsZXQgbz0wO288dDtvKyspe2NvbnN0IGk9dGhpcy5fX2RpZ2l0KG8pLF89MzI3NjcmaSx0PWk+Pj4xNSxsPUpTQkkuX19pbXVsKF8sZSkscj1KU0JJLl9faW11bChfLG4pLGE9SlNCSS5fX2ltdWwodCxlKSx1PUpTQkkuX19pbXVsKHQsbik7bGV0IGQ9cytsK2c7Zz1kPj4+MzAsZCY9MTA3Mzc0MTgyMyxkKz0oKDMyNzY3JnIpPDwxNSkrKCgzMjc2NyZhKTw8MTUpLGcrPWQ+Pj4zMCxzPXUrKHI+Pj4xNSkrKGE+Pj4xNSksdGhpcy5fX3NldERpZ2l0KG8sMTA3Mzc0MTgyMyZkKX1pZigwIT1nfHwwIT09cyl0aHJvdyBuZXcgRXJyb3IoXCJpbXBsZW1lbnRhdGlvbiBidWdcIil9c3RhdGljIF9fYWJzb2x1dGVEaXZTbWFsbChfLHQsZT1udWxsKXtudWxsPT09ZSYmKGU9bmV3IEpTQkkoXy5sZW5ndGgsITEpKTtsZXQgbj0wO2ZvcihsZXQgZyxzPTIqXy5sZW5ndGgtMTswPD1zO3MtPTIpe2c9KG48PDE1fF8uX19oYWxmRGlnaXQocykpPj4+MDtjb25zdCBpPTB8Zy90O249MHxnJXQsZz0objw8MTV8Xy5fX2hhbGZEaWdpdChzLTEpKT4+PjA7Y29uc3Qgbz0wfGcvdDtuPTB8ZyV0LGUuX19zZXREaWdpdChzPj4+MSxpPDwxNXxvKX1yZXR1cm4gZX1zdGF0aWMgX19hYnNvbHV0ZU1vZFNtYWxsKF8sdCl7bGV0IGU9MDtmb3IobGV0IG49MipfLmxlbmd0aC0xOzA8PW47bi0tKXtjb25zdCBpPShlPDwxNXxfLl9faGFsZkRpZ2l0KG4pKT4+PjA7ZT0wfGkldH1yZXR1cm4gZX1zdGF0aWMgX19hYnNvbHV0ZURpdkxhcmdlKGksXyx0LGUpe2NvbnN0IGc9Xy5fX2hhbGZEaWdpdExlbmd0aCgpLG49Xy5sZW5ndGgscz1pLl9faGFsZkRpZ2l0TGVuZ3RoKCktZztsZXQgbz1udWxsO3QmJihvPW5ldyBKU0JJKHMrMj4+PjEsITEpLG8uX19pbml0aWFsaXplRGlnaXRzKCkpO2NvbnN0IGw9bmV3IEpTQkkoZysyPj4+MSwhMSk7bC5fX2luaXRpYWxpemVEaWdpdHMoKTtjb25zdCByPUpTQkkuX19jbHoxNShfLl9faGFsZkRpZ2l0KGctMSkpOzA8ciYmKF89SlNCSS5fX3NwZWNpYWxMZWZ0U2hpZnQoXyxyLDApKTtjb25zdCBhPUpTQkkuX19zcGVjaWFsTGVmdFNoaWZ0KGksciwxKSx1PV8uX19oYWxmRGlnaXQoZy0xKTtsZXQgZD0wO2ZvcihsZXQgcixoPXM7MDw9aDtoLS0pe3I9MzI3Njc7Y29uc3QgaT1hLl9faGFsZkRpZ2l0KGgrZyk7aWYoaSE9PXUpe2NvbnN0IHQ9KGk8PDE1fGEuX19oYWxmRGlnaXQoaCtnLTEpKT4+PjA7cj0wfHQvdTtsZXQgZT0wfHQldTtjb25zdCBuPV8uX19oYWxmRGlnaXQoZy0yKSxzPWEuX19oYWxmRGlnaXQoaCtnLTIpO2Zvcig7SlNCSS5fX2ltdWwocixuKT4+PjA+KGU8PDE2fHMpPj4+MCYmKHItLSxlKz11LCEoMzI3Njc8ZSkpOyk7fUpTQkkuX19pbnRlcm5hbE11bHRpcGx5QWRkKF8sciwwLG4sbCk7bGV0IGU9YS5fX2lucGxhY2VTdWIobCxoLGcrMSk7MCE9PWUmJihlPWEuX19pbnBsYWNlQWRkKF8saCxnKSxhLl9fc2V0SGFsZkRpZ2l0KGgrZywzMjc2NyZhLl9faGFsZkRpZ2l0KGgrZykrZSksci0tKSx0JiYoMSZoP2Q9cjw8MTU6by5fX3NldERpZ2l0KGg+Pj4xLGR8cikpfWlmKGUpcmV0dXJuIGEuX19pbnBsYWNlUmlnaHRTaGlmdChyKSx0P3txdW90aWVudDpvLHJlbWFpbmRlcjphfTphO2lmKHQpcmV0dXJuIG87dGhyb3cgbmV3IEVycm9yKFwidW5yZWFjaGFibGVcIil9c3RhdGljIF9fY2x6MTUoaSl7cmV0dXJuIEpTQkkuX19jbHozMChpKS0xNX1fX2lucGxhY2VBZGQoXyx0LGUpe2xldCBuPTA7Zm9yKGxldCBnPTA7ZzxlO2crKyl7Y29uc3QgaT10aGlzLl9faGFsZkRpZ2l0KHQrZykrXy5fX2hhbGZEaWdpdChnKStuO249aT4+PjE1LHRoaXMuX19zZXRIYWxmRGlnaXQodCtnLDMyNzY3JmkpfXJldHVybiBufV9faW5wbGFjZVN1YihfLHQsZSl7bGV0IG49MDtpZigxJnQpe3Q+Pj0xO2xldCBnPXRoaXMuX19kaWdpdCh0KSxzPTMyNzY3Jmcsbz0wO2Zvcig7bzxlLTE+Pj4xO28rKyl7Y29uc3QgaT1fLl9fZGlnaXQobyksZT0oZz4+PjE1KS0oMzI3NjcmaSktbjtuPTEmZT4+PjE1LHRoaXMuX19zZXREaWdpdCh0K28sKDMyNzY3JmUpPDwxNXwzMjc2NyZzKSxnPXRoaXMuX19kaWdpdCh0K28rMSkscz0oMzI3NjcmZyktKGk+Pj4xNSktbixuPTEmcz4+PjE1fWNvbnN0IGk9Xy5fX2RpZ2l0KG8pLGw9KGc+Pj4xNSktKDMyNzY3JmkpLW47bj0xJmw+Pj4xNSx0aGlzLl9fc2V0RGlnaXQodCtvLCgzMjc2NyZsKTw8MTV8MzI3Njcmcyk7aWYodCtvKzE+PXRoaXMubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwib3V0IG9mIGJvdW5kc1wiKTswPT0oMSZlKSYmKGc9dGhpcy5fX2RpZ2l0KHQrbysxKSxzPSgzMjc2NyZnKS0oaT4+PjE1KS1uLG49MSZzPj4+MTUsdGhpcy5fX3NldERpZ2l0KHQrXy5sZW5ndGgsMTA3MzcwOTA1NiZnfDMyNzY3JnMpKX1lbHNle3Q+Pj0xO2xldCBnPTA7Zm9yKDtnPF8ubGVuZ3RoLTE7ZysrKXtjb25zdCBpPXRoaXMuX19kaWdpdCh0K2cpLGU9Xy5fX2RpZ2l0KGcpLHM9KDMyNzY3JmkpLSgzMjc2NyZlKS1uO249MSZzPj4+MTU7Y29uc3Qgbz0oaT4+PjE1KS0oZT4+PjE1KS1uO249MSZvPj4+MTUsdGhpcy5fX3NldERpZ2l0KHQrZywoMzI3Njcmbyk8PDE1fDMyNzY3JnMpfWNvbnN0IGk9dGhpcy5fX2RpZ2l0KHQrZykscz1fLl9fZGlnaXQoZyksbz0oMzI3NjcmaSktKDMyNzY3JnMpLW47bj0xJm8+Pj4xNTtsZXQgbD0wOzA9PSgxJmUpJiYobD0oaT4+PjE1KS0ocz4+PjE1KS1uLG49MSZsPj4+MTUpLHRoaXMuX19zZXREaWdpdCh0K2csKDMyNzY3JmwpPDwxNXwzMjc2NyZvKX1yZXR1cm4gbn1fX2lucGxhY2VSaWdodFNoaWZ0KF8pe2lmKDA9PT1fKXJldHVybjtsZXQgdD10aGlzLl9fZGlnaXQoMCk+Pj5fO2NvbnN0IGU9dGhpcy5sZW5ndGgtMTtmb3IobGV0IG49MDtuPGU7bisrKXtjb25zdCBpPXRoaXMuX19kaWdpdChuKzEpO3RoaXMuX19zZXREaWdpdChuLDEwNzM3NDE4MjMmaTw8MzAtX3x0KSx0PWk+Pj5ffXRoaXMuX19zZXREaWdpdChlLHQpfXN0YXRpYyBfX3NwZWNpYWxMZWZ0U2hpZnQoXyx0LGUpe2NvbnN0IGc9Xy5sZW5ndGgsbj1uZXcgSlNCSShnK2UsITEpO2lmKDA9PT10KXtmb3IobGV0IHQ9MDt0PGc7dCsrKW4uX19zZXREaWdpdCh0LF8uX19kaWdpdCh0KSk7cmV0dXJuIDA8ZSYmbi5fX3NldERpZ2l0KGcsMCksbn1sZXQgcz0wO2ZvcihsZXQgbz0wO288ZztvKyspe2NvbnN0IGk9Xy5fX2RpZ2l0KG8pO24uX19zZXREaWdpdChvLDEwNzM3NDE4MjMmaTw8dHxzKSxzPWk+Pj4zMC10fXJldHVybiAwPGUmJm4uX19zZXREaWdpdChnLHMpLG59c3RhdGljIF9fbGVmdFNoaWZ0QnlBYnNvbHV0ZShfLGkpe2NvbnN0IHQ9SlNCSS5fX3RvU2hpZnRBbW91bnQoaSk7aWYoMD50KXRocm93IG5ldyBSYW5nZUVycm9yKFwiQmlnSW50IHRvbyBiaWdcIik7Y29uc3QgZT0wfHQvMzAsbj10JTMwLGc9Xy5sZW5ndGgscz0wIT09biYmMCE9Xy5fX2RpZ2l0KGctMSk+Pj4zMC1uLG89ZytlKyhzPzE6MCksbD1uZXcgSlNCSShvLF8uc2lnbik7aWYoMD09PW4pe2xldCB0PTA7Zm9yKDt0PGU7dCsrKWwuX19zZXREaWdpdCh0LDApO2Zvcig7dDxvO3QrKylsLl9fc2V0RGlnaXQodCxfLl9fZGlnaXQodC1lKSl9ZWxzZXtsZXQgdD0wO2ZvcihsZXQgXz0wO188ZTtfKyspbC5fX3NldERpZ2l0KF8sMCk7Zm9yKGxldCBzPTA7czxnO3MrKyl7Y29uc3QgaT1fLl9fZGlnaXQocyk7bC5fX3NldERpZ2l0KHMrZSwxMDczNzQxODIzJmk8PG58dCksdD1pPj4+MzAtbn1pZihzKWwuX19zZXREaWdpdChnK2UsdCk7ZWxzZSBpZigwIT09dCl0aHJvdyBuZXcgRXJyb3IoXCJpbXBsZW1lbnRhdGlvbiBidWdcIil9cmV0dXJuIGwuX190cmltKCl9c3RhdGljIF9fcmlnaHRTaGlmdEJ5QWJzb2x1dGUoXyxpKXtjb25zdCB0PV8ubGVuZ3RoLGU9Xy5zaWduLG49SlNCSS5fX3RvU2hpZnRBbW91bnQoaSk7aWYoMD5uKXJldHVybiBKU0JJLl9fcmlnaHRTaGlmdEJ5TWF4aW11bShlKTtjb25zdCBnPTB8bi8zMCxzPW4lMzA7bGV0IG89dC1nO2lmKDA+PW8pcmV0dXJuIEpTQkkuX19yaWdodFNoaWZ0QnlNYXhpbXVtKGUpO2xldCBsPSExO2lmKGUpe2lmKDAhPShfLl9fZGlnaXQoZykmKDE8PHMpLTEpKWw9ITA7ZWxzZSBmb3IobGV0IHQ9MDt0PGc7dCsrKWlmKDAhPT1fLl9fZGlnaXQodCkpe2w9ITA7YnJlYWt9fWlmKGwmJjA9PT1zKXtjb25zdCBpPV8uX19kaWdpdCh0LTEpOzA9PX5pJiZvKyt9bGV0IHI9bmV3IEpTQkkobyxlKTtpZigwPT09cyl7ci5fX3NldERpZ2l0KG8tMSwwKTtmb3IobGV0IGU9ZztlPHQ7ZSsrKXIuX19zZXREaWdpdChlLWcsXy5fX2RpZ2l0KGUpKX1lbHNle2xldCBlPV8uX19kaWdpdChnKT4+PnM7Y29uc3Qgbj10LWctMTtmb3IobGV0IHQ9MDt0PG47dCsrKXtjb25zdCBpPV8uX19kaWdpdCh0K2crMSk7ci5fX3NldERpZ2l0KHQsMTA3Mzc0MTgyMyZpPDwzMC1zfGUpLGU9aT4+PnN9ci5fX3NldERpZ2l0KG4sZSl9cmV0dXJuIGwmJihyPUpTQkkuX19hYnNvbHV0ZUFkZE9uZShyLCEwLHIpKSxyLl9fdHJpbSgpfXN0YXRpYyBfX3JpZ2h0U2hpZnRCeU1heGltdW0oaSl7cmV0dXJuIGk/SlNCSS5fX29uZURpZ2l0KDEsITApOkpTQkkuX196ZXJvKCl9c3RhdGljIF9fdG9TaGlmdEFtb3VudChpKXtpZigxPGkubGVuZ3RoKXJldHVybi0xO2NvbnN0IF89aS5fX3Vuc2lnbmVkRGlnaXQoMCk7cmV0dXJuIF8+SlNCSS5fX2tNYXhMZW5ndGhCaXRzPy0xOl99c3RhdGljIF9fdG9QcmltaXRpdmUoaSxfPVwiZGVmYXVsdFwiKXtpZihcIm9iamVjdFwiIT10eXBlb2YgaSlyZXR1cm4gaTtpZihpLmNvbnN0cnVjdG9yPT09SlNCSSlyZXR1cm4gaTtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLnRvUHJpbWl0aXZlKXtjb25zdCB0PWlbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih0KXtjb25zdCBpPXQoXyk7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGkpcmV0dXJuIGk7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIil9fWNvbnN0IHQ9aS52YWx1ZU9mO2lmKHQpe2NvbnN0IF89dC5jYWxsKGkpO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBfKXJldHVybiBffWNvbnN0IGU9aS50b1N0cmluZztpZihlKXtjb25zdCBfPWUuY2FsbChpKTtpZihcIm9iamVjdFwiIT10eXBlb2YgXylyZXR1cm4gX310aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKX1zdGF0aWMgX190b051bWVyaWMoaSl7cmV0dXJuIEpTQkkuX19pc0JpZ0ludChpKT9pOitpfXN0YXRpYyBfX2lzQmlnSW50KGkpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiBpJiZudWxsIT09aSYmaS5jb25zdHJ1Y3Rvcj09PUpTQkl9c3RhdGljIF9fdHJ1bmNhdGVUb05CaXRzKGksXyl7Y29uc3QgdD0wfChpKzI5KS8zMCxlPW5ldyBKU0JJKHQsXy5zaWduKSxuPXQtMTtmb3IobGV0IHQ9MDt0PG47dCsrKWUuX19zZXREaWdpdCh0LF8uX19kaWdpdCh0KSk7bGV0IGc9Xy5fX2RpZ2l0KG4pO2lmKDAhPWklMzApe2NvbnN0IF89MzItaSUzMDtnPWc8PF8+Pj5ffXJldHVybiBlLl9fc2V0RGlnaXQobixnKSxlLl9fdHJpbSgpfXN0YXRpYyBfX3RydW5jYXRlQW5kU3ViRnJvbVBvd2VyT2ZUd28oXyx0LGUpe3ZhciBuPU1hdGgubWluO2NvbnN0IGc9MHwoXysyOSkvMzAscz1uZXcgSlNCSShnLGUpO2xldCBvPTA7Y29uc3QgbD1nLTE7bGV0IGE9MDtmb3IoY29uc3QgaT1uKGwsdC5sZW5ndGgpO288aTtvKyspe2NvbnN0IGk9MC10Ll9fZGlnaXQobyktYTthPTEmaT4+PjMwLHMuX19zZXREaWdpdChvLDEwNzM3NDE4MjMmaSl9Zm9yKDtvPGw7bysrKXMuX19zZXREaWdpdChvLDB8MTA3Mzc0MTgyMyYtYSk7bGV0IHU9bDx0Lmxlbmd0aD90Ll9fZGlnaXQobCk6MDtjb25zdCBkPV8lMzA7bGV0IGg7aWYoMD09ZCloPTAtdS1hLGgmPTEwNzM3NDE4MjM7ZWxzZXtjb25zdCBpPTMyLWQ7dT11PDxpPj4+aTtjb25zdCBfPTE8PDMyLWk7aD1fLXUtYSxoJj1fLTF9cmV0dXJuIHMuX19zZXREaWdpdChsLGgpLHMuX190cmltKCl9X19kaWdpdChfKXtyZXR1cm4gdGhpc1tfXX1fX3Vuc2lnbmVkRGlnaXQoXyl7cmV0dXJuIHRoaXNbX10+Pj4wfV9fc2V0RGlnaXQoXyxpKXt0aGlzW19dPTB8aX1fX3NldERpZ2l0R3JvdyhfLGkpe3RoaXNbX109MHxpfV9faGFsZkRpZ2l0TGVuZ3RoKCl7Y29uc3QgaT10aGlzLmxlbmd0aDtyZXR1cm4gMzI3Njc+PXRoaXMuX191bnNpZ25lZERpZ2l0KGktMSk/MippLTE6MippfV9faGFsZkRpZ2l0KF8pe3JldHVybiAzMjc2NyZ0aGlzW18+Pj4xXT4+PjE1KigxJl8pfV9fc2V0SGFsZkRpZ2l0KF8saSl7Y29uc3QgdD1fPj4+MSxlPXRoaXMuX19kaWdpdCh0KSxuPTEmXz8zMjc2NyZlfGk8PDE1OjEwNzM3MDkwNTYmZXwzMjc2NyZpO3RoaXMuX19zZXREaWdpdCh0LG4pfXN0YXRpYyBfX2RpZ2l0UG93KGksXyl7bGV0IHQ9MTtmb3IoOzA8XzspMSZfJiYodCo9aSksXz4+Pj0xLGkqPWk7cmV0dXJuIHR9c3RhdGljIF9faXNPbmVEaWdpdEludChpKXtyZXR1cm4oMTA3Mzc0MTgyMyZpKT09PWl9fUpTQkkuX19rTWF4TGVuZ3RoPTMzNTU0NDMyLEpTQkkuX19rTWF4TGVuZ3RoQml0cz1KU0JJLl9fa01heExlbmd0aDw8NSxKU0JJLl9fa01heEJpdHNQZXJDaGFyPVswLDAsMzIsNTEsNjQsNzUsODMsOTAsOTYsMTAyLDEwNywxMTEsMTE1LDExOSwxMjIsMTI2LDEyOCwxMzEsMTM0LDEzNiwxMzksMTQxLDE0MywxNDUsMTQ3LDE0OSwxNTEsMTUzLDE1NCwxNTYsMTU4LDE1OSwxNjAsMTYyLDE2MywxNjUsMTY2XSxKU0JJLl9fa0JpdHNQZXJDaGFyVGFibGVTaGlmdD01LEpTQkkuX19rQml0c1BlckNoYXJUYWJsZU11bHRpcGxpZXI9MTw8SlNCSS5fX2tCaXRzUGVyQ2hhclRhYmxlU2hpZnQsSlNCSS5fX2tDb252ZXJzaW9uQ2hhcnM9W1wiMFwiLFwiMVwiLFwiMlwiLFwiM1wiLFwiNFwiLFwiNVwiLFwiNlwiLFwiN1wiLFwiOFwiLFwiOVwiLFwiYVwiLFwiYlwiLFwiY1wiLFwiZFwiLFwiZVwiLFwiZlwiLFwiZ1wiLFwiaFwiLFwiaVwiLFwialwiLFwia1wiLFwibFwiLFwibVwiLFwiblwiLFwib1wiLFwicFwiLFwicVwiLFwiclwiLFwic1wiLFwidFwiLFwidVwiLFwidlwiLFwid1wiLFwieFwiLFwieVwiLFwielwiXSxKU0JJLl9fa0JpdENvbnZlcnNpb25CdWZmZXI9bmV3IEFycmF5QnVmZmVyKDgpLEpTQkkuX19rQml0Q29udmVyc2lvbkRvdWJsZT1uZXcgRmxvYXQ2NEFycmF5KEpTQkkuX19rQml0Q29udmVyc2lvbkJ1ZmZlciksSlNCSS5fX2tCaXRDb252ZXJzaW9uSW50cz1uZXcgSW50MzJBcnJheShKU0JJLl9fa0JpdENvbnZlcnNpb25CdWZmZXIpLEpTQkkuX19jbHozMD1NYXRoLmNsejMyP2Z1bmN0aW9uKGkpe3JldHVybiBNYXRoLmNsejMyKGkpLTJ9OmZ1bmN0aW9uKGkpe3JldHVybiAwPT09aT8zMDowfDI5LSgwfE1hdGgubG9nKGk+Pj4wKS9NYXRoLkxOMil9LEpTQkkuX19pbXVsPU1hdGguaW11bHx8ZnVuY3Rpb24oaSxfKXtyZXR1cm4gMHxpKl99O2V4cG9ydCBkZWZhdWx0IEpTQkk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc2JpLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsbi/dist/jsbi.mjs\n");

/***/ })

};
;