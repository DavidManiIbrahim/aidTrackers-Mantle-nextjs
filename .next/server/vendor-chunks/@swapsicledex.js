"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@swapsicledex";
exports.ids = ["vendor-chunks/@swapsicledex"];
exports.modules = {

/***/ "(ssr)/./node_modules/@swapsicledex/swapsicle-sdk/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@swapsicledex/swapsicle-sdk/dist/index.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./swapsicle-sdk.cjs.development.js */ \"(ssr)/./node_modules/@swapsicledex/swapsicle-sdk/dist/swapsicle-sdk.cjs.development.js\")\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN3YXBzaWNsZWRleC9zd2Fwc2ljbGUtc2RrL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUNZOztBQUVaLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSx3S0FBOEQ7QUFDaEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YWxsZXQtY29ubmVjdGlvbnMvLi9ub2RlX21vZHVsZXMvQHN3YXBzaWNsZWRleC9zd2Fwc2ljbGUtc2RrL2Rpc3QvaW5kZXguanM/ZDhmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc3RyaWN0J1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc3dhcHNpY2xlLXNkay5janMucHJvZHVjdGlvbi5taW4uanMnKVxufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3N3YXBzaWNsZS1zZGsuY2pzLmRldmVsb3BtZW50LmpzJylcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@swapsicledex/swapsicle-sdk/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@swapsicledex/swapsicle-sdk/dist/swapsicle-sdk.cjs.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@swapsicledex/swapsicle-sdk/dist/swapsicle-sdk.cjs.development.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar JSBI = _interopDefault(__webpack_require__(/*! jsbi */ \"(ssr)/./node_modules/jsbi/dist/jsbi.mjs\"));\nvar invariant = _interopDefault(__webpack_require__(/*! tiny-invariant */ \"(ssr)/./node_modules/tiny-invariant/dist/tiny-invariant.cjs.js\"));\nvar _Big = _interopDefault(__webpack_require__(/*! big.js */ \"(ssr)/./node_modules/big.js/big.js\"));\nvar _Decimal = _interopDefault(__webpack_require__(/*! decimal.js-light */ \"(ssr)/./node_modules/decimal.js-light/decimal.mjs\"));\nvar toFormat = _interopDefault(__webpack_require__(/*! toformat */ \"(ssr)/./node_modules/toformat/toFormat.js\"));\nvar address = __webpack_require__(/*! @ethersproject/address */ \"(ssr)/./node_modules/@ethersproject/address/lib.esm/index.js\");\nvar warning = _interopDefault(__webpack_require__(/*! tiny-warning */ \"(ssr)/./node_modules/tiny-warning/dist/tiny-warning.esm.js\"));\nvar solidity = __webpack_require__(/*! @ethersproject/solidity */ \"(ssr)/./node_modules/@ethersproject/solidity/lib.esm/index.js\");\nvar bignumber = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib.esm/index.js\");\n\nvar router = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_factory\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_WETH\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"WETH\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"tokenA\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"tokenB\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountADesired\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountBDesired\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountAMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountBMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"deadline\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"addLiquidity\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountA\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountB\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"liquidity\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"token\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountTokenDesired\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountTokenMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountETHMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"deadline\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"addLiquidityETH\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountToken\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountETH\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"liquidity\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"payable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"factory\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountOut\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"reserveIn\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"reserveOut\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"getAmountIn\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountIn\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"pure\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountIn\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"reserveIn\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"reserveOut\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"getAmountOut\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountOut\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"pure\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountOut\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address[]\",\n\t\t\t\tname: \"path\",\n\t\t\t\ttype: \"address[]\"\n\t\t\t}\n\t\t],\n\t\tname: \"getAmountsIn\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"amounts\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountIn\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address[]\",\n\t\t\t\tname: \"path\",\n\t\t\t\ttype: \"address[]\"\n\t\t\t}\n\t\t],\n\t\tname: \"getAmountsOut\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"amounts\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountA\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"reserveA\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"reserveB\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"quote\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountB\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"pure\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"tokenA\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"tokenB\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"liquidity\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountAMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountBMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"deadline\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"removeLiquidity\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountA\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountB\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"token\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"liquidity\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountTokenMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountETHMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"deadline\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"removeLiquidityETH\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountToken\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountETH\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"token\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"liquidity\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountTokenMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountETHMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"deadline\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"removeLiquidityETHSupportingFeeOnTransferTokens\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountETH\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"token\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"liquidity\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountTokenMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountETHMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"deadline\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"approveMax\",\n\t\t\t\ttype: \"bool\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"v\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"r\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"s\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t}\n\t\t],\n\t\tname: \"removeLiquidityETHWithPermit\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountToken\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountETH\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"token\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"liquidity\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountTokenMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountETHMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"deadline\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"approveMax\",\n\t\t\t\ttype: \"bool\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"v\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"r\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"s\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t}\n\t\t],\n\t\tname: \"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountETH\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"tokenA\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"tokenB\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"liquidity\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountAMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountBMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"deadline\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"approveMax\",\n\t\t\t\ttype: \"bool\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"v\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"r\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"s\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t}\n\t\t],\n\t\tname: \"removeLiquidityWithPermit\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountA\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountB\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountOut\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address[]\",\n\t\t\t\tname: \"path\",\n\t\t\t\ttype: \"address[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"deadline\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"swapETHForExactTokens\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"amounts\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"payable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountOutMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address[]\",\n\t\t\t\tname: \"path\",\n\t\t\t\ttype: \"address[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"deadline\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"swapExactETHForTokens\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"amounts\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"payable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountOutMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address[]\",\n\t\t\t\tname: \"path\",\n\t\t\t\ttype: \"address[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"deadline\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"swapExactETHForTokensSupportingFeeOnTransferTokens\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"payable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountIn\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountOutMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address[]\",\n\t\t\t\tname: \"path\",\n\t\t\t\ttype: \"address[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"deadline\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"swapExactTokensForETH\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"amounts\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountIn\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountOutMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address[]\",\n\t\t\t\tname: \"path\",\n\t\t\t\ttype: \"address[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"deadline\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"swapExactTokensForETHSupportingFeeOnTransferTokens\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountIn\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountOutMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address[]\",\n\t\t\t\tname: \"path\",\n\t\t\t\ttype: \"address[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"deadline\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"swapExactTokensForTokens\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"amounts\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountIn\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountOutMin\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address[]\",\n\t\t\t\tname: \"path\",\n\t\t\t\ttype: \"address[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"deadline\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountOut\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountInMax\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address[]\",\n\t\t\t\tname: \"path\",\n\t\t\t\ttype: \"address[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"deadline\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"swapTokensForExactETH\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"amounts\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountOut\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountInMax\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address[]\",\n\t\t\t\tname: \"path\",\n\t\t\t\ttype: \"address[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"deadline\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"swapTokensForExactTokens\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"amounts\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tstateMutability: \"payable\",\n\t\ttype: \"receive\"\n\t}\n];\n\n(function (ChainId) {\n  ChainId[ChainId[\"ARBITRUM\"] = 42161] = \"ARBITRUM\";\n  ChainId[ChainId[\"ARBITRUM_TESTNET\"] = 421614] = \"ARBITRUM_TESTNET\";\n  ChainId[ChainId[\"AVALANCHE\"] = 43114] = \"AVALANCHE\";\n  ChainId[ChainId[\"AVALANCHE_TESTNET\"] = 43113] = \"AVALANCHE_TESTNET\";\n  ChainId[ChainId[\"BASE\"] = 8453] = \"BASE\";\n  ChainId[ChainId[\"BSC\"] = 56] = \"BSC\";\n  ChainId[ChainId[\"BSC_TESTNET\"] = 97] = \"BSC_TESTNET\";\n  ChainId[ChainId[\"BLAST\"] = 81457] = \"BLAST\";\n  ChainId[ChainId[\"CELO\"] = 42220] = \"CELO\";\n  ChainId[ChainId[\"CORE\"] = 1116] = \"CORE\";\n  ChainId[ChainId[\"CRONOS\"] = 25] = \"CRONOS\";\n  ChainId[ChainId[\"ETHEREUM\"] = 1] = \"ETHEREUM\";\n  ChainId[ChainId[\"FANTOM\"] = 250] = \"FANTOM\";\n  ChainId[ChainId[\"FANTOM_TESTNET\"] = 4002] = \"FANTOM_TESTNET\";\n  ChainId[ChainId[\"FUSE\"] = 122] = \"FUSE\";\n  ChainId[ChainId[\"HARDHAT\"] = 31337] = \"HARDHAT\";\n  ChainId[ChainId[\"HARMONY\"] = 1666600000] = \"HARMONY\";\n  ChainId[ChainId[\"HARMONY_TESTNET\"] = 1666700000] = \"HARMONY_TESTNET\";\n  ChainId[ChainId[\"HECO\"] = 128] = \"HECO\";\n  ChainId[ChainId[\"HECO_TESTNET\"] = 256] = \"HECO_TESTNET\";\n  ChainId[ChainId[\"LINEA\"] = 59144] = \"LINEA\";\n  ChainId[ChainId[\"MANTLE\"] = 5000] = \"MANTLE\";\n  ChainId[ChainId[\"MANTLE_TESTNET\"] = 5003] = \"MANTLE_TESTNET\";\n  ChainId[ChainId[\"MATIC\"] = 137] = \"MATIC\";\n  ChainId[ChainId[\"MATIC_TESTNET\"] = 80002] = \"MATIC_TESTNET\";\n  ChainId[ChainId[\"MOONBEAM\"] = 1284] = \"MOONBEAM\";\n  ChainId[ChainId[\"MOONBEAM_TESTNET\"] = 1287] = \"MOONBEAM_TESTNET\";\n  ChainId[ChainId[\"MOONRIVER\"] = 1285] = \"MOONRIVER\";\n  ChainId[ChainId[\"OKEX\"] = 66] = \"OKEX\";\n  ChainId[ChainId[\"OKEX_TESTNET\"] = 65] = \"OKEX_TESTNET\";\n  ChainId[ChainId[\"OPTIMISM\"] = 10] = \"OPTIMISM\";\n  ChainId[ChainId[\"PALM\"] = 11297108109] = \"PALM\";\n  ChainId[ChainId[\"PALM_TESTNET\"] = 11297108099] = \"PALM_TESTNET\";\n  ChainId[ChainId[\"PULSECHAIN\"] = 369] = \"PULSECHAIN\";\n  ChainId[ChainId[\"SCROLL\"] = 534352] = \"SCROLL\";\n  ChainId[ChainId[\"TAIKO\"] = 167000] = \"TAIKO\";\n  ChainId[ChainId[\"TAIKO_TESTNET\"] = 167009] = \"TAIKO_TESTNET\";\n  ChainId[ChainId[\"TELOS\"] = 40] = \"TELOS\";\n  ChainId[ChainId[\"TELOS_TESTNET\"] = 41] = \"TELOS_TESTNET\";\n  ChainId[ChainId[\"XDAI\"] = 100] = \"XDAI\";\n  ChainId[ChainId[\"ZKSYNC\"] = 324] = \"ZKSYNC\";\n})(exports.ChainId || (exports.ChainId = {}));\n\n(function (ChainKey) {\n  ChainKey[\"ARBITRUM\"] = \"arbitrum\";\n  ChainKey[\"ARBITRUM_TESTNET\"] = \"arbitrum-testnet\";\n  ChainKey[\"AVALANCHE\"] = \"avalanche\";\n  ChainKey[\"AVALANCHE_TESTNET\"] = \"avalance-testnet\";\n  ChainKey[\"BSC\"] = \"bsc\";\n  ChainKey[\"BSC_TESTNET\"] = \"bsc-testnet\";\n  ChainKey[\"CELO\"] = \"celo\";\n  ChainKey[\"ETHEREUM\"] = \"ethereum\";\n  ChainKey[\"FANTOM\"] = \"fantom\";\n  ChainKey[\"FANTOM_TESTNET\"] = \"fantom-testnet\";\n  ChainKey[\"FUSE\"] = \"fuse\";\n  ChainKey[\"G\\xD6RLI\"] = \"goerli\";\n  ChainKey[\"HARMONY\"] = \"harmony\";\n  ChainKey[\"HARMONY_TESTNET\"] = \"harmony-testnet\";\n  ChainKey[\"HECO\"] = \"heco\";\n  ChainKey[\"HECO_TESTNET\"] = \"heco-testnet\";\n  ChainKey[\"MATIC\"] = \"polygon\";\n  ChainKey[\"MATIC_TESTNET\"] = \"matic-testnet\";\n  ChainKey[\"MOONBEAM_TESTNET\"] = \"moonbeam-testnet\";\n  ChainKey[\"MOONRIVER\"] = \"moonriver\";\n  ChainKey[\"OKEX\"] = \"okex\";\n  ChainKey[\"OKEX_TESTNET\"] = \"okex-testnet\";\n  ChainKey[\"PALM\"] = \"palm\";\n  ChainKey[\"PALM_TESTNET\"] = \"palm-testnet\";\n  ChainKey[\"RINKEBY\"] = \"rinkeby\";\n  ChainKey[\"TELOS\"] = \"telos\";\n  ChainKey[\"TELOS_TESTNET\"] = \"telos-testnet\";\n  ChainKey[\"XDAI\"] = \"xdai\";\n  ChainKey[\"MOONBEAM\"] = \"moonbeam\";\n  ChainKey[\"MANTLE\"] = \"mantle\";\n  ChainKey[\"MANTLE_TESTNET\"] = \"mantle-testnet\";\n  ChainKey[\"BASE\"] = \"base\";\n  ChainKey[\"BLAST\"] = \"blast\";\n  ChainKey[\"CORE\"] = \"core\";\n  ChainKey[\"CRONOS\"] = \"cronos\";\n  ChainKey[\"LINEA\"] = \"linea\";\n  ChainKey[\"PULSECHAIN\"] = \"pulsechain\";\n  ChainKey[\"SCROLL\"] = \"scroll\";\n  ChainKey[\"ZKSYNC\"] = \"zksync\";\n})(exports.ChainKey || (exports.ChainKey = {}));\n\n(function (Rounding) {\n  Rounding[Rounding[\"ROUND_DOWN\"] = 0] = \"ROUND_DOWN\";\n  Rounding[Rounding[\"ROUND_HALF_UP\"] = 1] = \"ROUND_HALF_UP\";\n  Rounding[Rounding[\"ROUND_UP\"] = 3] = \"ROUND_UP\";\n})(exports.Rounding || (exports.Rounding = {}));\n\n(function (SolidityType) {\n  SolidityType[\"uint8\"] = \"uint8\";\n  SolidityType[\"uint256\"] = \"uint256\";\n})(exports.SolidityType || (exports.SolidityType = {}));\n\n(function (TradeType) {\n  TradeType[TradeType[\"EXACT_INPUT\"] = 0] = \"EXACT_INPUT\";\n  TradeType[TradeType[\"EXACT_OUTPUT\"] = 1] = \"EXACT_OUTPUT\";\n})(exports.TradeType || (exports.TradeType = {}));\n\n(function (TradeVersion) {\n  TradeVersion[TradeVersion[\"V2TRADE\"] = 0] = \"V2TRADE\";\n  TradeVersion[TradeVersion[\"V3TRADE\"] = 1] = \"V3TRADE\";\n})(exports.TradeVersion || (exports.TradeVersion = {}));\n\nvar _CHAIN_KEY;\nvar CHAIN_KEY = (_CHAIN_KEY = {}, _CHAIN_KEY[exports.ChainId.ETHEREUM] = exports.ChainKey.ETHEREUM, _CHAIN_KEY[exports.ChainId.MATIC] = exports.ChainKey.MATIC, _CHAIN_KEY[exports.ChainId.MATIC_TESTNET] = exports.ChainKey.MATIC_TESTNET, _CHAIN_KEY[exports.ChainId.FANTOM] = exports.ChainKey.FANTOM, _CHAIN_KEY[exports.ChainId.FANTOM_TESTNET] = exports.ChainKey.FANTOM_TESTNET, _CHAIN_KEY[exports.ChainId.XDAI] = exports.ChainKey.XDAI, _CHAIN_KEY[exports.ChainId.BSC] = exports.ChainKey.BSC, _CHAIN_KEY[exports.ChainId.BSC_TESTNET] = exports.ChainKey.BSC_TESTNET, _CHAIN_KEY[exports.ChainId.ARBITRUM] = exports.ChainKey.ARBITRUM, _CHAIN_KEY[exports.ChainId.ARBITRUM_TESTNET] = exports.ChainKey.ARBITRUM_TESTNET, _CHAIN_KEY[exports.ChainId.MOONBEAM_TESTNET] = exports.ChainKey.MOONBEAM_TESTNET, _CHAIN_KEY[exports.ChainId.AVALANCHE] = exports.ChainKey.AVALANCHE, _CHAIN_KEY[exports.ChainId.AVALANCHE_TESTNET] = exports.ChainKey.AVALANCHE_TESTNET, _CHAIN_KEY[exports.ChainId.HECO] = exports.ChainKey.HECO, _CHAIN_KEY[exports.ChainId.HECO_TESTNET] = exports.ChainKey.HECO_TESTNET, _CHAIN_KEY[exports.ChainId.HARMONY] = exports.ChainKey.HARMONY, _CHAIN_KEY[exports.ChainId.HARMONY_TESTNET] = exports.ChainKey.HARMONY_TESTNET, _CHAIN_KEY[exports.ChainId.OKEX] = exports.ChainKey.OKEX, _CHAIN_KEY[exports.ChainId.OKEX_TESTNET] = exports.ChainKey.OKEX_TESTNET, _CHAIN_KEY[exports.ChainId.CELO] = exports.ChainKey.CELO, _CHAIN_KEY[exports.ChainId.PALM] = exports.ChainKey.PALM, _CHAIN_KEY[exports.ChainId.PALM_TESTNET] = exports.ChainKey.PALM_TESTNET, _CHAIN_KEY[exports.ChainId.MOONRIVER] = exports.ChainKey.MOONRIVER, _CHAIN_KEY[exports.ChainId.FUSE] = exports.ChainKey.FUSE, _CHAIN_KEY[exports.ChainId.TELOS] = exports.ChainKey.TELOS, _CHAIN_KEY[exports.ChainId.TELOS_TESTNET] = exports.ChainKey.TELOS_TESTNET, _CHAIN_KEY[exports.ChainId.MOONBEAM] = exports.ChainKey.MOONBEAM, _CHAIN_KEY[exports.ChainId.MANTLE] = exports.ChainKey.MANTLE, _CHAIN_KEY[exports.ChainId.MANTLE_TESTNET] = exports.ChainKey.MANTLE_TESTNET, _CHAIN_KEY[exports.ChainId.BASE] = exports.ChainKey.BASE, _CHAIN_KEY[exports.ChainId.BLAST] = exports.ChainKey.BLAST, _CHAIN_KEY[exports.ChainId.CORE] = exports.ChainKey.CORE, _CHAIN_KEY[exports.ChainId.CRONOS] = exports.ChainKey.CRONOS, _CHAIN_KEY[exports.ChainId.LINEA] = exports.ChainKey.LINEA, _CHAIN_KEY[exports.ChainId.PULSECHAIN] = exports.ChainKey.PULSECHAIN, _CHAIN_KEY[exports.ChainId.SCROLL] = exports.ChainKey.SCROLL, _CHAIN_KEY[exports.ChainId.ZKSYNC] = exports.ChainKey.ZKSYNC, _CHAIN_KEY);\n\nvar _INIT_CODE_HASH, _INIT_CODE_HASH_PORTF, _FACTORY_ADDRESS;\nvar INIT_CODE_HASH = (_INIT_CODE_HASH = {}, _INIT_CODE_HASH[exports.ChainId.AVALANCHE] = '0x9e43ee37212e3296c7f6087d3e0a37b48a4e4e413538dac0fd18cfe2f80666c1', _INIT_CODE_HASH[exports.ChainId.BSC] = '0x2ed0c8714ca80192f88764ee4b4c8c8cb6dfc01859a02b25ce67f304e499d48e', _INIT_CODE_HASH[exports.ChainId.MATIC] = '0x2ed0c8714ca80192f88764ee4b4c8c8cb6dfc01859a02b25ce67f304e499d48e', _INIT_CODE_HASH[exports.ChainId.FANTOM] = '0xcb64282d14f9033fbb6a3a827bd515fff027bb6994a0d33ac0424e7e3037dad3', _INIT_CODE_HASH[exports.ChainId.ETHEREUM] = '0x2ed0c8714ca80192f88764ee4b4c8c8cb6dfc01859a02b25ce67f304e499d48e', _INIT_CODE_HASH[exports.ChainId.OPTIMISM] = '0x2ed0c8714ca80192f88764ee4b4c8c8cb6dfc01859a02b25ce67f304e499d48e', _INIT_CODE_HASH[exports.ChainId.ARBITRUM] = '0x2ed0c8714ca80192f88764ee4b4c8c8cb6dfc01859a02b25ce67f304e499d48e', _INIT_CODE_HASH[exports.ChainId.TELOS] = '0x73d5f9d3e0db97ca102c315a9a45dfebef394eae36edcce8853bcb1ee049a6dd', _INIT_CODE_HASH[exports.ChainId.TELOS_TESTNET] = '0x73d5f9d3e0db97ca102c315a9a45dfebef394eae36edcce8853bcb1ee049a6dd', _INIT_CODE_HASH[exports.ChainId.MANTLE_TESTNET] = '0x5e1d196be4a859f73a656ec6b02da4a9530c56505a7638308b6d04661f45f38f', _INIT_CODE_HASH[exports.ChainId.MANTLE] = '0x5e1d196be4a859f73a656ec6b02da4a9530c56505a7638308b6d04661f45f38f', _INIT_CODE_HASH);\nvar INIT_CODE_HASH_PORTFOLIO = (_INIT_CODE_HASH_PORTF = {}, _INIT_CODE_HASH_PORTF[exports.ChainId.AVALANCHE] = '0x9e43ee37212e3296c7f6087d3e0a37b48a4e4e413538dac0fd18cfe2f80666c1', _INIT_CODE_HASH_PORTF[exports.ChainId.BSC] = '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5', _INIT_CODE_HASH_PORTF[exports.ChainId.MATIC] = '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303', _INIT_CODE_HASH_PORTF[exports.ChainId.FANTOM] = '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303', _INIT_CODE_HASH_PORTF[exports.ChainId.ETHEREUM] = '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303', _INIT_CODE_HASH_PORTF[exports.ChainId.OPTIMISM] = '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303', _INIT_CODE_HASH_PORTF[exports.ChainId.ARBITRUM] = '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303', _INIT_CODE_HASH_PORTF[exports.ChainId.TELOS] = '0x73d5f9d3e0db97ca102c315a9a45dfebef394eae36edcce8853bcb1ee049a6dd', _INIT_CODE_HASH_PORTF[exports.ChainId.TELOS_TESTNET] = '0x73d5f9d3e0db97ca102c315a9a45dfebef394eae36edcce8853bcb1ee049a6dd', _INIT_CODE_HASH_PORTF[exports.ChainId.MANTLE_TESTNET] = '0x5e1d196be4a859f73a656ec6b02da4a9530c56505a7638308b6d04661f45f38f', _INIT_CODE_HASH_PORTF[exports.ChainId.MANTLE] = '0x5e1d196be4a859f73a656ec6b02da4a9530c56505a7638308b6d04661f45f38f', _INIT_CODE_HASH_PORTF);\nvar FACTORY_ADDRESS = (_FACTORY_ADDRESS = {}, _FACTORY_ADDRESS[exports.ChainId.ETHEREUM] = \"0x2F0C7C98462651BB2102F6Cd05acDAd333E031b0\", _FACTORY_ADDRESS[exports.ChainId.OPTIMISM] = \"0x2F0C7C98462651BB2102F6Cd05acDAd333E031b0\", _FACTORY_ADDRESS[exports.ChainId.ARBITRUM] = \"0x2F0C7C98462651BB2102F6Cd05acDAd333E031b0\", _FACTORY_ADDRESS[exports.ChainId.MATIC] = \"0x735ab9808d792B5c8B54e31196c011c26C08b4ce\", _FACTORY_ADDRESS[exports.ChainId.FANTOM] = \"0x98F23162E3a7FE610aC89C88E4217a599A15858F\", _FACTORY_ADDRESS[exports.ChainId.BSC] = \"0xEe673452BD981966d4799c865a96e0b92A8d0E45\", _FACTORY_ADDRESS[exports.ChainId.AVALANCHE] = \"0x9c60c867ce07a3c403e2598388673c10259ec768\", _FACTORY_ADDRESS[exports.ChainId.TELOS] = \"0xb630f53df13645bff0ef55eb44a8a490a7dd4514\", _FACTORY_ADDRESS[exports.ChainId.TELOS_TESTNET] = \"0x722F473AE392eF537D74f8F71602A584a10739F0\", _FACTORY_ADDRESS);\n\nvar MaxUint256 = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n// exports for internal consumption\nvar ZERO = /*#__PURE__*/JSBI.BigInt(0);\nvar ONE = /*#__PURE__*/JSBI.BigInt(1);\nvar TWO = /*#__PURE__*/JSBI.BigInt(2);\nvar THREE = /*#__PURE__*/JSBI.BigInt(3);\nvar FIVE = /*#__PURE__*/JSBI.BigInt(5);\nvar TEN = /*#__PURE__*/JSBI.BigInt(10);\nvar _100 = /*#__PURE__*/JSBI.BigInt(100);\nvar _997 = /*#__PURE__*/JSBI.BigInt(997);\nvar _1000 = /*#__PURE__*/JSBI.BigInt(1000);\nvar MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI.BigInt(1000);\n\nvar _SOLIDITY_TYPE_MAXIMA;\nvar SOLIDITY_TYPE_MAXIMA = (_SOLIDITY_TYPE_MAXIMA = {}, _SOLIDITY_TYPE_MAXIMA[exports.SolidityType.uint8] = /*#__PURE__*/JSBI.BigInt('0xff'), _SOLIDITY_TYPE_MAXIMA[exports.SolidityType.uint256] = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'), _SOLIDITY_TYPE_MAXIMA);\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\n// see https://stackoverflow.com/a/41102306\nvar CAN_SET_PROTOTYPE = ('setPrototypeOf' in Object);\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\nvar InsufficientReservesError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(InsufficientReservesError, _Error);\n  function InsufficientReservesError() {\n    var _this;\n    _this = _Error.call(this) || this;\n    _this.isInsufficientReservesError = true;\n    _this.name = _this.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof InsufficientReservesError ? this.constructor : void 0).prototype);\n    return _this;\n  }\n  return InsufficientReservesError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\nvar InsufficientInputAmountError = /*#__PURE__*/function (_Error2) {\n  _inheritsLoose(InsufficientInputAmountError, _Error2);\n  function InsufficientInputAmountError() {\n    var _this2;\n    _this2 = _Error2.call(this) || this;\n    _this2.isInsufficientInputAmountError = true;\n    _this2.name = _this2.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this2), (this instanceof InsufficientInputAmountError ? this.constructor : void 0).prototype);\n    return _this2;\n  }\n  return InsufficientInputAmountError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\nvar AbstractCurrency =\n/**\r\n * Constructs an instance of the base class `BaseCurrency`.\r\n * @param chainId the chain ID on which this currency resides\r\n * @param decimals decimals of the currency\r\n * @param symbol symbol of the currency\r\n * @param name of the currency\r\n */\nfunction AbstractCurrency(chainId, decimals, symbol, name) {\n  !Number.isSafeInteger(chainId) ?  invariant(false, 'CHAIN_ID')  : void 0;\n  !(decimals >= 0 && decimals < 255 && Number.isInteger(decimals)) ?  invariant(false, 'DECIMALS')  : void 0;\n  this.chainId = chainId;\n  this.decimals = decimals;\n  this.symbol = symbol;\n  this.name = name;\n};\n\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */\nvar NativeCurrency = /*#__PURE__*/function (_AbstractCurrency) {\n  _inheritsLoose(NativeCurrency, _AbstractCurrency);\n  function NativeCurrency() {\n    var _this;\n    _this = _AbstractCurrency.apply(this, arguments) || this;\n    _this.isNative = true;\n    _this.isToken = false;\n    return _this;\n  }\n  return NativeCurrency;\n}(AbstractCurrency);\n\nvar _toSignificantRoundin, _toFixedRounding;\nvar Decimal = /*#__PURE__*/toFormat(_Decimal);\nvar Big = /*#__PURE__*/toFormat(_Big);\nBig.strict = true;\nvar RoundingMode;\n(function (RoundingMode) {\n  RoundingMode[RoundingMode[\"RoundDown\"] = 0] = \"RoundDown\";\n  RoundingMode[RoundingMode[\"RoundHalfUp\"] = 1] = \"RoundHalfUp\";\n  RoundingMode[RoundingMode[\"RoundHalfEven\"] = 2] = \"RoundHalfEven\";\n  RoundingMode[RoundingMode[\"RoundUp\"] = 3] = \"RoundUp\";\n})(RoundingMode || (RoundingMode = {}));\nvar toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[exports.Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[exports.Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[exports.Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);\nvar toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[exports.Rounding.ROUND_DOWN] = RoundingMode.RoundDown, _toFixedRounding[exports.Rounding.ROUND_HALF_UP] = RoundingMode.RoundHalfUp, _toFixedRounding[exports.Rounding.ROUND_UP] = RoundingMode.RoundUp, _toFixedRounding);\nvar Fraction = /*#__PURE__*/function () {\n  function Fraction(numerator, denominator) {\n    if (denominator === void 0) {\n      denominator = JSBI.BigInt(1);\n    }\n    this.numerator = JSBI.BigInt(numerator);\n    this.denominator = JSBI.BigInt(denominator);\n  }\n  Fraction.tryParseFraction = function tryParseFraction(fractionish) {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string') return new Fraction(fractionish);\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish;\n    throw new Error('Could not parse fraction');\n  }\n  // performs floor division\n  ;\n  var _proto = Fraction.prototype;\n  _proto.invert = function invert() {\n    return new Fraction(this.denominator, this.numerator);\n  };\n  _proto.add = function add(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n  _proto.subtract = function subtract(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n  _proto.lessThan = function lessThan(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n  _proto.equalTo = function equalTo(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n  _proto.greaterThan = function greaterThan(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n  _proto.multiply = function multiply(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n  _proto.divide = function divide(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\n  };\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n    if (rounding === void 0) {\n      rounding = exports.Rounding.ROUND_HALF_UP;\n    }\n    !Number.isInteger(significantDigits) ?  invariant(false, significantDigits + \" is not an integer.\")  : void 0;\n    !(significantDigits > 0) ?  invariant(false, significantDigits + \" is not positive.\")  : void 0;\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  };\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n    if (rounding === void 0) {\n      rounding = exports.Rounding.ROUND_HALF_UP;\n    }\n    !Number.isInteger(decimalPlaces) ?  invariant(false, decimalPlaces + \" is not an integer.\")  : void 0;\n    !(decimalPlaces >= 0) ?  invariant(false, decimalPlaces + \" is negative.\")  : void 0;\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  }\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */;\n  _createClass(Fraction, [{\n    key: \"quotient\",\n    get: function get() {\n      return JSBI.divide(this.numerator, this.denominator);\n    }\n    // remainder after floor division\n  }, {\n    key: \"remainder\",\n    get: function get() {\n      return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\n    }\n  }, {\n    key: \"asFraction\",\n    get: function get() {\n      return new Fraction(this.numerator, this.denominator);\n    }\n  }]);\n  return Fraction;\n}();\n\nvar Big$1 = /*#__PURE__*/toFormat(_Big);\nBig$1.strict = true;\nvar CurrencyAmount = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(CurrencyAmount, _Fraction);\n  function CurrencyAmount(currency, numerator, denominator) {\n    var _this;\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    !JSBI.lessThanOrEqual(_this.quotient, MaxUint256) ?  invariant(false, 'AMOUNT')  : void 0;\n    _this.currency = currency;\n    _this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals));\n    return _this;\n  }\n  /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\n  CurrencyAmount.fromRawAmount = function fromRawAmount(currency, rawAmount) {\n    return new CurrencyAmount(currency, rawAmount);\n  }\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */;\n  CurrencyAmount.fromFractionalAmount = function fromFractionalAmount(currency, numerator, denominator) {\n    return new CurrencyAmount(currency, numerator, denominator);\n  };\n  var _proto = CurrencyAmount.prototype;\n  _proto.add = function add(other) {\n    !this.currency.equals(other.currency) ?  invariant(false, 'CURRENCY')  : void 0;\n    var added = _Fraction.prototype.add.call(this, other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator);\n  };\n  _proto.addCustom = function addCustom(other) {\n    // invariant(this.currency.equals(other.currency), 'CURRENCY')\n    if (this.currency.equals(other.currency)) {\n      var added = _Fraction.prototype.add.call(this, other);\n      return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator);\n    } else {\n      if (this.wrapped.currency.symbol == 'USDC') {\n        // console.log(\"test-addCustom USDC\", other.currency.symbol)\n        return CurrencyAmount.fromFractionalAmount(this.currency, this.numerator, this.denominator);\n        // return this\n      } else {\n        // console.log(\"test-addCustom\", this.currency.symbol, \" USDC\")\n        return CurrencyAmount.fromFractionalAmount(other.currency, other.numerator, other.denominator);\n        // return other\n      }\n    }\n  };\n  _proto.subtract = function subtract(other) {\n    !this.currency.equals(other.currency) ?  invariant(false, 'CURRENCY')  : void 0;\n    var subtracted = _Fraction.prototype.subtract.call(this, other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator);\n  };\n  _proto.multiply = function multiply(other) {\n    var multiplied = _Fraction.prototype.multiply.call(this, other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator);\n  };\n  _proto.divide = function divide(other) {\n    var divided = _Fraction.prototype.divide.call(this, other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator);\n  };\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n    if (rounding === void 0) {\n      rounding = exports.Rounding.ROUND_DOWN;\n    }\n    return _Fraction.prototype.divide.call(this, this.decimalScale).toSignificant(significantDigits, format, rounding);\n  };\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = this.currency.decimals;\n    }\n    if (rounding === void 0) {\n      rounding = exports.Rounding.ROUND_DOWN;\n    }\n    !(decimalPlaces <= this.currency.decimals) ?  invariant(false, 'DECIMALS')  : void 0;\n    return _Fraction.prototype.divide.call(this, this.decimalScale).toFixed(decimalPlaces, format, rounding);\n  };\n  _proto.toExact = function toExact(format) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n    Big$1.DP = this.currency.decimals;\n    return new Big$1(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format);\n  };\n  /**\r\n   * Returns a string representation of the address and currency amount.\r\n   * Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\r\n   * @return string [0x6B3595068778DD592e39A122f4f5a5cF09C90fE2 - 1323.94]\r\n   */\n  _proto.serialize = function serialize() {\n    return \"[\" + this.currency.wrapped.address + \" - \" + this.toExact() + \"]\";\n  };\n  _createClass(CurrencyAmount, [{\n    key: \"wrapped\",\n    get: function get() {\n      if (this.currency.isToken) return this;\n      return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator);\n    }\n  }]);\n  return CurrencyAmount;\n}(Fraction);\n\nvar Price = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Price, _Fraction);\n  /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */\n  function Price() {\n    var _this;\n    var baseCurrency, quoteCurrency, denominator, numerator;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args.length === 4) {\n      baseCurrency = args[0];\n      quoteCurrency = args[1];\n      denominator = args[2];\n      numerator = args[3];\n    } else {\n      var result = args[0].quoteAmount.divide(args[0].baseAmount);\n      var _ref = [args[0].baseAmount.currency, args[0].quoteAmount.currency, result.denominator, result.numerator];\n      baseCurrency = _ref[0];\n      quoteCurrency = _ref[1];\n      denominator = _ref[2];\n      numerator = _ref[3];\n    }\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    _this.baseCurrency = baseCurrency;\n    _this.quoteCurrency = quoteCurrency;\n    _this.scalar = new Fraction(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals)));\n    return _this;\n  }\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\n  var _proto = Price.prototype;\n  _proto.invert = function invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  }\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */;\n  _proto.multiply = function multiply(other) {\n    !this.quoteCurrency.equals(other.baseCurrency) ?  invariant(false, 'TOKEN')  : void 0;\n    var fraction = _Fraction.prototype.multiply.call(this, other);\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  }\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */;\n  _proto.quote = function quote(currencyAmount) {\n    !currencyAmount.currency.equals(this.baseCurrency) ?  invariant(false, 'TOKEN')  : void 0;\n    var result = _Fraction.prototype.multiply.call(this, currencyAmount);\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator);\n  }\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */;\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);\n  };\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 4;\n    }\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);\n  };\n  _createClass(Price, [{\n    key: \"adjustedForDecimals\",\n    get: function get() {\n      return _Fraction.prototype.multiply.call(this, this.scalar);\n    }\n  }]);\n  return Price;\n}(Fraction);\n\n// warns if addresses are not checksummed\nfunction validateAndParseAddress(address$1) {\n  try {\n    var checksummedAddress = address.getAddress(address$1);\n     true ? warning(address$1 === checksummedAddress, address$1 + \" is not checksummed.\") : 0;\n    return checksummedAddress;\n  } catch (error) {\n      invariant(false, address$1 + \" is not a valid address.\")  ;\n  }\n}\n\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\nvar Token = /*#__PURE__*/function (_AbstractCurrency) {\n  _inheritsLoose(Token, _AbstractCurrency);\n  function Token(chainId, address, decimals, symbol, name) {\n    var _this;\n    _this = _AbstractCurrency.call(this, chainId, decimals, symbol, name) || this;\n    _this.isNative = false;\n    _this.isToken = true;\n    _this.chainId = chainId;\n    _this.address = validateAndParseAddress(address);\n    return _this;\n  }\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\n  var _proto = Token.prototype;\n  _proto.equals = function equals(other) {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address;\n  }\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */;\n  _proto.sortsBefore = function sortsBefore(other) {\n    !(this.chainId === other.chainId) ?  invariant(false, 'CHAIN_IDS')  : void 0;\n    !(this.address !== other.address) ?  invariant(false, 'ADDRESSES')  : void 0;\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  }\n  /**\r\n   * Return this token, which does not need to be wrapped\r\n   */;\n  _createClass(Token, [{\n    key: \"wrapped\",\n    get: function get() {\n      return this;\n    }\n  }]);\n  return Token;\n}(AbstractCurrency);\n/**\r\n * Compares two currencies for equality\r\n */\nfunction currencyEquals(currencyA, currencyB) {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB);\n  } else if (currencyA instanceof Token) {\n    return false;\n  } else if (currencyB instanceof Token) {\n    return false;\n  } else {\n    return currencyA === currencyB;\n  }\n}\n\nvar computePairAddress = function computePairAddress(_ref) {\n  var factoryAddress = _ref.factoryAddress,\n    tokenA = _ref.tokenA,\n    tokenB = _ref.tokenB;\n  var _ref2 = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA],\n    token0 = _ref2[0],\n    token1 = _ref2[1]; // does safety checks\n  return address.getCreate2Address(factoryAddress, solidity.keccak256(['bytes'], [solidity.pack(['address', 'address'], [token0.address, token1.address])]), INIT_CODE_HASH[token0.chainId]);\n};\n\nvar MAX_SAFE_INTEGER = /*#__PURE__*/JSBI.BigInt(Number.MAX_SAFE_INTEGER);\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\nfunction sqrt(value) {\n  !JSBI.greaterThanOrEqual(value, ZERO) ?  invariant(false, 'NEGATIVE')  : void 0;\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))));\n  }\n  var z;\n  var x;\n  z = value;\n  x = JSBI.add(JSBI.divide(value, TWO), ONE);\n  while (JSBI.lessThan(x, z)) {\n    z = x;\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO);\n  }\n  return z;\n}\n/**\r\n * Returns the smallest member of the array\r\n * @param values the values from which the smallest gets returned\r\n * @returns the smallest memmber of the array\r\n */\nfunction minimum() {\n  var lowest = arguments.length <= 0 ? undefined : arguments[0];\n  for (var i = 1; i < arguments.length; i++) {\n    var value = i < 0 || arguments.length <= i ? undefined : arguments[i];\n    if (JSBI.LT(value, lowest)) {\n      lowest = value;\n    }\n  }\n  return lowest;\n}\n/**\r\n * Returns the biggest member of the array\r\n * @param values the values from which the biggest gets returned\r\n * @returns the biggest memmber of the array\r\n */\nfunction maximum() {\n  var highest = arguments.length <= 0 ? undefined : arguments[0];\n  for (var i = 1; i < arguments.length; i++) {\n    var value = i < 0 || arguments.length <= i ? undefined : arguments[i];\n    if (JSBI.GT(value, highest)) {\n      highest = value;\n    }\n  }\n  return highest;\n}\nfunction difference(a, b) {\n  if (JSBI.greaterThan(a, b)) {\n    return JSBI.subtract(a, b);\n  }\n  return JSBI.subtract(b, a);\n}\n\nvar Pair = /*#__PURE__*/function () {\n  function Pair(currencyAmountA, currencyAmountB) {\n    var currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n    ? [currencyAmountA, currencyAmountB] : [currencyAmountB, currencyAmountA];\n    this.liquidityToken = new Token(currencyAmounts[0].currency.chainId, Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency), 18, 'SLP', 'SicleSwap LP Token');\n    this.tokenAmounts = currencyAmounts;\n  }\n  Pair.getAddress = function getAddress(tokenA, tokenB) {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA: tokenA,\n      tokenB: tokenB\n    });\n  }\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */;\n  var _proto = Pair.prototype;\n  _proto.involvesToken = function involvesToken(token) {\n    return token.equals(this.token0) || token.equals(this.token1);\n  }\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */;\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\n  _proto.priceOf = function priceOf(token) {\n    !this.involvesToken(token) ?  invariant(false, 'TOKEN')  : void 0;\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\n  }\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */;\n  _proto.reserveOf = function reserveOf(token) {\n    !this.involvesToken(token) ?  invariant(false, 'TOKEN')  : void 0;\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\n  };\n  _proto.getOutputAmount = function getOutputAmount(inputAmount) {\n    !this.involvesToken(inputAmount.currency) ?  invariant(false, 'TOKEN')  : void 0;\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError();\n    }\n    var inputReserve = this.reserveOf(inputAmount.currency);\n    var outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0);\n    var inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997);\n    var numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient);\n    var denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee);\n    var outputAmount = CurrencyAmount.fromRawAmount(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator));\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n  _proto.getInputAmount = function getInputAmount(outputAmount) {\n    !this.involvesToken(outputAmount.currency) ?  invariant(false, 'TOKEN')  : void 0;\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO) || JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)) {\n      throw new InsufficientReservesError();\n    }\n    var outputReserve = this.reserveOf(outputAmount.currency);\n    var inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0);\n    var numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000);\n    var denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997);\n    var inputAmount = CurrencyAmount.fromRawAmount(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0, JSBI.add(JSBI.divide(numerator, denominator), ONE));\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n  _proto.getLiquidityMinted = function getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {\n    !totalSupply.currency.equals(this.liquidityToken) ?  invariant(false, 'LIQUIDITY')  : void 0;\n    var tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    !(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1)) ?  invariant(false, 'TOKEN')  : void 0;\n    var liquidity;\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)), MINIMUM_LIQUIDITY);\n    } else {\n      var amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient);\n      var amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient);\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\n      // console.log({\n      //   amount0: amount0.toString(),\n      //   amount1: amount1.toString(),\n      //   liquidity: liquidity.toString(),\n      //   totalSupply: totalSupply.quotient.toString(),\n      //   kLast: sqrt(JSBI.multiply(this.tokenAmounts[0].quotient, this.tokenAmounts[1].quotient)),\n      // })\n    }\n\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity);\n  };\n  _proto.getLiquidityValue = function getLiquidityValue(token, totalSupply, liquidity, feeOn, kLast) {\n    if (feeOn === void 0) {\n      feeOn = false;\n    }\n    !this.involvesToken(token) ?  invariant(false, 'TOKEN')  : void 0;\n    !totalSupply.currency.equals(this.liquidityToken) ?  invariant(false, 'TOTAL_SUPPLY')  : void 0;\n    !liquidity.currency.equals(this.liquidityToken) ?  invariant(false, 'LIQUIDITY')  : void 0;\n    !JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient) ?  invariant(false, 'LIQUIDITY')  : void 0;\n    var totalSupplyAdjusted;\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply;\n    } else {\n      !!!kLast ?  invariant(false, 'K_LAST')  : void 0;\n      var kLastParsed = JSBI.BigInt(kLast);\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        var rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient));\n        var rootKLast = sqrt(kLastParsed);\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          var numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast));\n          var denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\n          var feeLiquidity = JSBI.divide(numerator, denominator);\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity));\n        } else {\n          totalSupplyAdjusted = totalSupply;\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply;\n      }\n    }\n    return CurrencyAmount.fromRawAmount(token, JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient));\n  };\n  _createClass(Pair, [{\n    key: \"token0Price\",\n    get: function get() {\n      var result = this.tokenAmounts[1].divide(this.tokenAmounts[0]);\n      return new Price(this.token0, this.token1, result.denominator, result.numerator);\n    }\n    /**\r\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n     */\n  }, {\n    key: \"token1Price\",\n    get: function get() {\n      var result = this.tokenAmounts[0].divide(this.tokenAmounts[1]);\n      return new Price(this.token1, this.token0, result.denominator, result.numerator);\n    }\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.token0.chainId;\n    }\n  }, {\n    key: \"token0\",\n    get: function get() {\n      return this.tokenAmounts[0].currency;\n    }\n  }, {\n    key: \"token1\",\n    get: function get() {\n      return this.tokenAmounts[1].currency;\n    }\n  }, {\n    key: \"reserve0\",\n    get: function get() {\n      return this.tokenAmounts[0];\n    }\n  }, {\n    key: \"reserve1\",\n    get: function get() {\n      return this.tokenAmounts[1];\n    }\n  }]);\n  return Pair;\n}();\n\nvar ONE_HUNDRED = /*#__PURE__*/new Fraction( /*#__PURE__*/JSBI.BigInt(100));\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\nfunction toPercent(fraction) {\n  return new Percent(fraction.numerator, fraction.denominator);\n}\nvar Percent = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Percent, _Fraction);\n  function Percent() {\n    var _this;\n    _this = _Fraction.apply(this, arguments) || this;\n    /**\r\n     * This boolean prevents a fraction from being interpreted as a Percent\r\n     */\n    _this.isPercent = true;\n    return _this;\n  }\n  var _proto = Percent.prototype;\n  _proto.add = function add(other) {\n    return toPercent(_Fraction.prototype.add.call(this, other));\n  };\n  _proto.subtract = function subtract(other) {\n    return toPercent(_Fraction.prototype.subtract.call(this, other));\n  };\n  _proto.multiply = function multiply(other) {\n    return toPercent(_Fraction.prototype.multiply.call(this, other));\n  };\n  _proto.divide = function divide(other) {\n    return toPercent(_Fraction.prototype.divide.call(this, other));\n  };\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 5;\n    }\n    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toSignificant(significantDigits, format, rounding);\n  };\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 2;\n    }\n    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\n  };\n  return Percent;\n}(Fraction);\n\nvar Route = /*#__PURE__*/function () {\n  function Route(pairs, input, output) {\n    this._midPrice = null;\n    !(pairs.length > 0) ?  invariant(false, 'PAIRS')  : void 0;\n    var chainId = pairs[0].chainId;\n    !pairs.every(function (pair) {\n      return pair.chainId === chainId;\n    }) ?  invariant(false, 'CHAIN_IDS')  : void 0;\n    var wrappedInput = input.wrapped;\n    !pairs[0].involvesToken(wrappedInput) ?  invariant(false, 'INPUT')  : void 0;\n    !(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped)) ?  invariant(false, 'OUTPUT')  : void 0;\n    var path = [wrappedInput];\n    for (var _iterator = _createForOfIteratorHelperLoose(pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n        i = _step$value[0],\n        pair = _step$value[1];\n      var currentInput = path[i];\n      !(currentInput.equals(pair.token0) || currentInput.equals(pair.token1)) ?  invariant(false, 'PATH')  : void 0;\n      var _output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\n      path.push(_output);\n    }\n    this.pairs = pairs;\n    this.path = path;\n    this.input = input;\n    this.output = output;\n  }\n  _createClass(Route, [{\n    key: \"midPrice\",\n    get: function get() {\n      if (this._midPrice !== null) return this._midPrice;\n      var prices = [];\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.pairs.entries()), _step2; !(_step2 = _iterator2()).done;) {\n        var _step2$value = _step2.value,\n          i = _step2$value[0],\n          pair = _step2$value[1];\n        prices.push(this.path[i].equals(pair.token0) ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient) : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient));\n      }\n      var reduced = prices.slice(1).reduce(function (accumulator, currentValue) {\n        return accumulator.multiply(currentValue);\n      }, prices[0]);\n      return this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator);\n    }\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.pairs[0].chainId;\n    }\n  }]);\n  return Route;\n}();\n\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\nfunction computePriceImpact(midPrice, inputAmount, outputAmount) {\n  var quotedOutputAmount = midPrice.quote(inputAmount);\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  var priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount);\n  return new Percent(priceImpact.numerator, priceImpact.denominator);\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nfunction sortedInsert(items, add, maxSize, comparator) {\n  !(maxSize > 0) ?  invariant(false, 'MAX_SIZE_ZERO')  : void 0;\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  !(items.length <= maxSize) ?  invariant(false, 'ITEMS_SIZE')  : void 0;\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add);\n    return null;\n  } else {\n    var isFull = items.length === maxSize;\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add;\n    }\n    var lo = 0,\n      hi = items.length;\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n    items.splice(lo, 0, add);\n    return isFull ? items.pop() : null;\n  }\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nfunction inputOutputComparator(a, b) {\n  // must have same input and output token for comparison\n  !a.inputAmount.currency.equals(b.inputAmount.currency) ?  invariant(false, 'INPUT_CURRENCY')  : void 0;\n  !a.outputAmount.currency.equals(b.outputAmount.currency) ?  invariant(false, 'OUTPUT_CURRENCY')  : void 0;\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0;\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nfunction tradeComparator(a, b) {\n  var ioComp = inputOutputComparator(a, b);\n  if (ioComp !== 0) {\n    return ioComp;\n  }\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1;\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1;\n  }\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length;\n}\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\nvar Trade = /*#__PURE__*/function () {\n  function Trade(route, amount, tradeType) {\n    this.route = route;\n    this.tradeType = tradeType;\n    var tokenAmounts = new Array(route.path.length);\n    if (tradeType === exports.TradeType.EXACT_INPUT) {\n      !amount.currency.equals(route.input) ?  invariant(false, 'INPUT')  : void 0;\n      tokenAmounts[0] = amount.wrapped;\n      for (var i = 0; i < route.path.length - 1; i++) {\n        var pair = route.pairs[i];\n        var _pair$getOutputAmount = pair.getOutputAmount(tokenAmounts[i]),\n          outputAmount = _pair$getOutputAmount[0];\n        tokenAmounts[i + 1] = outputAmount;\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator);\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, tokenAmounts[tokenAmounts.length - 1].numerator, tokenAmounts[tokenAmounts.length - 1].denominator);\n    } else {\n      !amount.currency.equals(route.output) ?  invariant(false, 'OUTPUT')  : void 0;\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped;\n      for (var _i = route.path.length - 1; _i > 0; _i--) {\n        var _pair = route.pairs[_i - 1];\n        var _pair$getInputAmount = _pair.getInputAmount(tokenAmounts[_i]),\n          inputAmount = _pair$getInputAmount[0];\n        tokenAmounts[_i - 1] = inputAmount;\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, tokenAmounts[0].numerator, tokenAmounts[0].denominator);\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator);\n    }\n    this.executionPrice = new Price(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.quotient, this.outputAmount.quotient);\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount);\n  }\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\n  Trade.exactIn = function exactIn(route, amountIn) {\n    return new Trade(route, amountIn, exports.TradeType.EXACT_INPUT);\n  }\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */;\n  Trade.exactOut = function exactOut(route, amountOut) {\n    return new Trade(route, amountOut, exports.TradeType.EXACT_OUTPUT);\n  }\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */;\n  var _proto = Trade.prototype;\n  _proto.minimumAmountOut = function minimumAmountOut(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ?  invariant(false, 'SLIPPAGE_TOLERANCE')  : void 0;\n    if (this.tradeType === exports.TradeType.EXACT_OUTPUT) {\n      return this.outputAmount;\n    } else {\n      var slippageAdjustedAmountOut = new Fraction(ONE).add(slippageTolerance).invert().multiply(this.outputAmount.quotient).quotient;\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut);\n    }\n  }\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */;\n  _proto.maximumAmountIn = function maximumAmountIn(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ?  invariant(false, 'SLIPPAGE_TOLERANCE')  : void 0;\n    if (this.tradeType === exports.TradeType.EXACT_INPUT) {\n      return this.inputAmount;\n    } else {\n      var slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient).quotient;\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn);\n    }\n  }\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param nextAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */;\n  Trade.bestTradeExactIn = function bestTradeExactIn(pairs, currencyAmountIn, currencyOut, _temp,\n  // used in recursion.\n  currentPairs, nextAmountIn, bestTrades) {\n    var _ref = _temp === void 0 ? {} : _temp,\n      _ref$maxNumResults = _ref.maxNumResults,\n      maxNumResults = _ref$maxNumResults === void 0 ? 3 : _ref$maxNumResults,\n      _ref$maxHops = _ref.maxHops,\n      maxHops = _ref$maxHops === void 0 ? 3 : _ref$maxHops;\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n    if (nextAmountIn === void 0) {\n      nextAmountIn = currencyAmountIn;\n    }\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n    !(pairs.length > 0) ?  invariant(false, 'PAIRS')  : void 0;\n    !(maxHops > 0) ?  invariant(false, 'MAX_HOPS')  : void 0;\n    !(currencyAmountIn === nextAmountIn || currentPairs.length > 0) ?  invariant(false, 'INVALID_RECURSION')  : void 0;\n    var amountIn = nextAmountIn.wrapped;\n    var tokenOut = currencyOut.wrapped;\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i];\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountOut = void 0;\n      try {\n        ;\n        var _pair$getOutputAmount2 = pair.getOutputAmount(amountIn);\n        amountOut = _pair$getOutputAmount2[0];\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue;\n        }\n        throw error;\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(bestTrades, new Trade(new Route([].concat(currentPairs, [pair]), currencyAmountIn.currency, currencyOut), currencyAmountIn, exports.TradeType.EXACT_INPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length));\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(pairsExcludingThisPair, currencyAmountIn, currencyOut, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [].concat(currentPairs, [pair]), amountOut, bestTrades);\n      }\n    }\n    return bestTrades;\n  }\n  /**\r\n   * Return the execution price after accounting for slippage tolerance\r\n   * @param slippageTolerance the allowed tolerated slippage\r\n   */;\n  _proto.worstExecutionPrice = function worstExecutionPrice(slippageTolerance) {\n    return new Price(this.inputAmount.currency, this.outputAmount.currency, this.maximumAmountIn(slippageTolerance).quotient, this.minimumAmountOut(slippageTolerance).quotient);\n  }\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param nextAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */;\n  Trade.bestTradeExactOut = function bestTradeExactOut(pairs, currencyIn, currencyAmountOut, _temp2,\n  // used in recursion.\n  currentPairs, nextAmountOut, bestTrades) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n      _ref2$maxNumResults = _ref2.maxNumResults,\n      maxNumResults = _ref2$maxNumResults === void 0 ? 3 : _ref2$maxNumResults,\n      _ref2$maxHops = _ref2.maxHops,\n      maxHops = _ref2$maxHops === void 0 ? 3 : _ref2$maxHops;\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n    if (nextAmountOut === void 0) {\n      nextAmountOut = currencyAmountOut;\n    }\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n    !(pairs.length > 0) ?  invariant(false, 'PAIRS')  : void 0;\n    !(maxHops > 0) ?  invariant(false, 'MAX_HOPS')  : void 0;\n    !(currencyAmountOut === nextAmountOut || currentPairs.length > 0) ?  invariant(false, 'INVALID_RECURSION')  : void 0;\n    var amountOut = nextAmountOut.wrapped;\n    var tokenIn = currencyIn.wrapped;\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i];\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountIn = void 0;\n      try {\n        ;\n        var _pair$getInputAmount2 = pair.getInputAmount(amountOut);\n        amountIn = _pair$getInputAmount2[0];\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue;\n        }\n        throw error;\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(bestTrades, new Trade(new Route([pair].concat(currentPairs), currencyIn, currencyAmountOut.currency), currencyAmountOut, exports.TradeType.EXACT_OUTPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length));\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(pairsExcludingThisPair, currencyIn, currencyAmountOut, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [pair].concat(currentPairs), amountIn, bestTrades);\n      }\n    }\n    return bestTrades;\n  };\n  return Trade;\n}();\n\nvar computePairAddressPortfolio = function computePairAddressPortfolio(_ref) {\n  var factoryAddress = _ref.factoryAddress,\n    tokenA = _ref.tokenA,\n    tokenB = _ref.tokenB;\n  var _ref2 = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA],\n    token0 = _ref2[0],\n    token1 = _ref2[1]; // does safety checks\n  return address.getCreate2Address(factoryAddress, solidity.keccak256(['bytes'], [solidity.pack(['address', 'address'], [token0.address, token1.address])]), INIT_CODE_HASH_PORTFOLIO[token0.chainId]);\n};\n\n// account is not optional\nfunction getSigner(library, account) {\n  return library.getSigner(account).connectUnchecked();\n}\n// account is optional\nfunction getProviderOrSigner(library, account) {\n  return account ? getSigner(library, account) : library;\n}\n\nfunction rebase(value, from, to) {\n  return from ? JSBI.divide(JSBI.multiply(value, to), from) : ZERO;\n}\nfunction toElastic(total, base, roundUp) {\n  var elastic;\n  if (JSBI.equal(total.base, ZERO)) {\n    elastic = base;\n  } else {\n    elastic = JSBI.divide(JSBI.multiply(base, total.elastic), total.base);\n    if (roundUp && JSBI.lessThan(JSBI.divide(JSBI.multiply(elastic, total.base), total.elastic), base)) {\n      elastic = JSBI.add(elastic, ONE);\n    }\n  }\n  return elastic;\n}\n\nfunction validateSolidityTypeInstance(value, solidityType) {\n  !JSBI.greaterThanOrEqual(value, ZERO) ?  invariant(false, value + \" is not a \" + solidityType + \".\")  : void 0;\n  !JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]) ?  invariant(false, value + \" is not a \" + solidityType + \".\")  : void 0;\n}\n\nvar ZERO_PERCENT = /*#__PURE__*/new Percent('0');\nvar ONE_HUNDRED_PERCENT = /*#__PURE__*/new Percent('1');\n// returns whether tradeB is better than tradeA by at least a threshold percentage amount\nfunction isTradeBetter(tradeA, tradeB, minimumDelta) {\n  if (minimumDelta === void 0) {\n    minimumDelta = ZERO_PERCENT;\n  }\n  if (tradeA && !tradeB) return false;\n  if (tradeB && !tradeA) return true;\n  if (!tradeA || !tradeB) return undefined;\n  if (tradeA.tradeType !== tradeB.tradeType || !tradeA.inputAmount.currency.equals(tradeB.inputAmount.currency) || !tradeB.outputAmount.currency.equals(tradeB.outputAmount.currency)) {\n    throw new Error('Comparing incomparable trades');\n  }\n  if (minimumDelta.equalTo(ZERO_PERCENT)) {\n    return tradeA.executionPrice.lessThan(tradeB.executionPrice);\n  } else {\n    return tradeA.executionPrice.asFraction.multiply(minimumDelta.add(ONE_HUNDRED_PERCENT)).lessThan(tradeB.executionPrice);\n  }\n}\n// add 20%\nfunction calculateGasMargin(value) {\n  return value.mul(bignumber.BigNumber.from(10000 + 2000)).div(bignumber.BigNumber.from(10000));\n}\nvar ONE$1 = /*#__PURE__*/new Fraction(1, 1);\nfunction calculateSlippageAmount(value, slippage) {\n  if (slippage.lessThan(0) || slippage.greaterThan(ONE$1)) throw new Error('Unexpected slippage');\n  return [value.multiply(ONE$1.subtract(slippage)).quotient, value.multiply(ONE$1.add(slippage)).quotient];\n}\nfunction computeFiatValuePriceImpact(fiatValueInput, fiatValueOutput) {\n  if (!fiatValueOutput || !fiatValueInput) return undefined;\n  if (!fiatValueInput.currency.equals(fiatValueOutput.currency)) return undefined;\n  if (JSBI.equal(fiatValueInput.quotient, JSBI.BigInt(0))) return undefined;\n  var pct = ONE_HUNDRED_PERCENT.subtract(fiatValueOutput.divide(fiatValueInput));\n  return new Percent(pct.numerator, pct.denominator);\n}\n\nfunction toHex(currencyAmount) {\n  return \"0x\" + currencyAmount.quotient.toString(16);\n}\nvar ZERO_HEX = '0x0';\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\nvar Router = /*#__PURE__*/function () {\n  /**\r\n   * Cannot be constructed.\r\n   */\n  function Router() {}\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\n  Router.swapCallParameters = function swapCallParameters(trade, options) {\n    var etherIn = trade.inputAmount.currency.isNative;\n    var etherOut = trade.outputAmount.currency.isNative;\n    // the router does not support both ether in and out\n    !!(etherIn && etherOut) ?  invariant(false, 'ETHER_IN_OUT')  : void 0;\n    !(!('ttl' in options) || options.ttl > 0) ?  invariant(false, 'TTL')  : void 0;\n    var to = validateAndParseAddress(options.recipient);\n    var amountIn = toHex(trade.maximumAmountIn(options.allowedSlippage));\n    var amountOut = toHex(trade.minimumAmountOut(options.allowedSlippage));\n    var path = trade.route.path.map(function (token) {\n      return token.address;\n    });\n    var deadline = 'ttl' in options ? \"0x\" + (Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16) : \"0x\" + options.deadline.toString(16);\n    var useFeeOnTransfer = Boolean(options.feeOnTransfer);\n    var methodName;\n    var args;\n    var value;\n    switch (trade.tradeType) {\n      case exports.TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens';\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH';\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens' : 'swapExactTokensForTokens';\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        }\n        break;\n      case exports.TradeType.EXACT_OUTPUT:\n        !!useFeeOnTransfer ?  invariant(false, 'EXACT_OUT_FOT')  : void 0;\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens';\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH';\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = 'swapTokensForExactTokens';\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        }\n        break;\n    }\n    return {\n      methodName: methodName,\n      args: args,\n      value: value\n    };\n  };\n  return Router;\n}();\n\nexports.JSBI = JSBI;\nexports.AbstractCurrency = AbstractCurrency;\nexports.CHAIN_KEY = CHAIN_KEY;\nexports.CurrencyAmount = CurrencyAmount;\nexports.FACTORY_ADDRESS = FACTORY_ADDRESS;\nexports.FIVE = FIVE;\nexports.Fraction = Fraction;\nexports.INIT_CODE_HASH = INIT_CODE_HASH;\nexports.INIT_CODE_HASH_PORTFOLIO = INIT_CODE_HASH_PORTFOLIO;\nexports.InsufficientInputAmountError = InsufficientInputAmountError;\nexports.InsufficientReservesError = InsufficientReservesError;\nexports.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;\nexports.MINIMUM_LIQUIDITY = MINIMUM_LIQUIDITY;\nexports.MaxUint256 = MaxUint256;\nexports.NativeCurrency = NativeCurrency;\nexports.ONE = ONE;\nexports.ONE_HUNDRED_PERCENT = ONE_HUNDRED_PERCENT;\nexports.Pair = Pair;\nexports.Percent = Percent;\nexports.Price = Price;\nexports.ROUTER_ABI = router;\nexports.Route = Route;\nexports.Router = Router;\nexports.SOLIDITY_TYPE_MAXIMA = SOLIDITY_TYPE_MAXIMA;\nexports.TEN = TEN;\nexports.THREE = THREE;\nexports.TWO = TWO;\nexports.Token = Token;\nexports.Trade = Trade;\nexports.ZERO = ZERO;\nexports.ZERO_PERCENT = ZERO_PERCENT;\nexports._100 = _100;\nexports._1000 = _1000;\nexports._997 = _997;\nexports.calculateGasMargin = calculateGasMargin;\nexports.calculateSlippageAmount = calculateSlippageAmount;\nexports.computeFiatValuePriceImpact = computeFiatValuePriceImpact;\nexports.computePairAddress = computePairAddress;\nexports.computePairAddressPortfolio = computePairAddressPortfolio;\nexports.computePriceImpact = computePriceImpact;\nexports.currencyEquals = currencyEquals;\nexports.difference = difference;\nexports.getProviderOrSigner = getProviderOrSigner;\nexports.getSigner = getSigner;\nexports.inputOutputComparator = inputOutputComparator;\nexports.isTradeBetter = isTradeBetter;\nexports.maximum = maximum;\nexports.minimum = minimum;\nexports.rebase = rebase;\nexports.sortedInsert = sortedInsert;\nexports.sqrt = sqrt;\nexports.toElastic = toElastic;\nexports.toHex = toHex;\nexports.tradeComparator = tradeComparator;\nexports.validateAndParseAddress = validateAndParseAddress;\nexports.validateSolidityTypeInstance = validateSolidityTypeInstance;\n//# sourceMappingURL=swapsicle-sdk.cjs.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@swapsicledex/swapsicle-sdk/dist/swapsicle-sdk.cjs.development.js\n");

/***/ })

};
;